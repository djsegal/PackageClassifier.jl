SymSemiseparableMatrices.jl Description A package for efficiently computing with symmetric extended generator representable semiseparable matrices and a variant thereof. In short this means matrices of the form as well as All implemented algorithms (multiplication, Cholesky factorization, forward/backward substitution as well as various traces and determinants) run linear in time and memory w.r.t. to the number of data points n . Usage First we need to create generators U and V that represent the symmetric matrix, K = tril(UV') + triu(VU',1) as well a test vector x . julia > U, V = spline_kernel ( Vector ( 0.1 : 0.01 : 1 ), 2 ); # Creating input such that K is positive definite julia > K = SymSemiseparable (U,V); # Symmetric generator representable semiseparable matrix julia > x = ones (K . n); # Test vector We can now compute products with K and K' . The result are the same as K is symmetric. julia > K * x 91 × 1 Array{Float64, 2 } : 0.23508333333333334 0.28261583333333334 0.3341535 0.3896073333333333 0.44888933333333336 0.5119124999999999 ⋮ 11.977057499999997 12.146079333333331 12.31510733333333 12.484138499999995 12.65317083333333 julia > K ' * x 91 × 1 Array{Float64, 2 } : 0.23508333333333334 0.28261583333333334 0.3341535 0.3896073333333333 0.44888933333333336 0.5119124999999999 ⋮ 11.977057499999997 12.146079333333331 12.31510733333333 12.484138499999995 12.65317083333333 julia > K * (K \ x) 91 × 1 Array{Float64, 2 } : 1.0000000000000036 0.9999999999999982 0.9999999999999956 0.9999999999999944 0.9999999999999951 0.999999999999995 ⋮ 0.9999999999996279 0.9999999999996153 0.9999999999996028 0.9999999999995898 0.9999999999995764 Furthermore from the SymSemiseparable structure we can efficiently compute the Cholesky factorization as julia > L = SymSemiseparableChol (K); # Computing the Cholesky factorization of K Now L represents a Cholesky factorization with the form L = tril(UW') . Computations with SymSemiseparableChol can be performed similar to that of SymSemiseparable . The simple structure gives rise to linear (time and storage) algorithms for solving linear systems of equations. A struct for the dealing with symmetric matrices of the form, K = tril(UV') + triu(VU',1) + diag(d) called DiaSymSemiseparable is also implemented. The usage is similar to that of SymSemiseparable and can be created as follows julia > U, V = spline_kernel ( Vector ( 0.1 : 0.01 : 1 ), 2 ); # Creating input such that K is positive definite julia > K = DiaSymSemiseparable (U,V, rand ( size (U, 1 )); # Symmetric generator representable semiseparable matrix + diagonal The Cholesky factorization of this matrix can be computed using DiaSymSemiseparableChol . Note however here that L represents a matrix of the form L = tril(UW',-1) + diag(c) Benchmarks Computing Cholesky factorization of K = tril(UV') + triu(VU',1) Computing Cholesky factorization of K = tril(UV') + triu(VU',1) + diag(d) Solving linear systems using a Cholesky factorization with the form L = tril(UW') References [1] M. S. Andersen and T. Chen. “Smoothing Splines and Rank Structured Matrices: Revisiting the Spline Kernel”. Manuscript submitted for publication. June 2019. [2] J. Keiner. "Fast Polynomial Transforms." Logos Verlag Berlin, 2011.