SemiDiscretizationMethod.jl Julia package to investigate the behaviour of linear delay differential equations based on the book Semi-Discretization for Time-Delay Systems (by Insperger and Stepan) . This package provides a tool to approximate the stability properties and stationary behaviour of linear periodic delay systems of the form: by transforming the underlying differential equation into the mapping: where is the discrete time , is the mapping matrix constructed using , and , while the vector is the discretized state space vector: Each coefficient matrices of delay differential equations are periodic, with a principle period of , namely: Furthermore, the integer is chosen in a way, that (the discretized "history function" contains all possible delayed values). With the use of the discrete mapping, the stability of the original system can be investigated (approximately), by the spectral radius of the product of the mapping matrices over a period: Furthermore, the stationary solution can be determined by the periodic fix point (stationary orbit) of the mapping. Citing If you use this package as part of your research, teaching, or other activities, we would be grateful if you could cite the book it is based on (BibTeX entry): @book{Insperger2011, address = {New York, NY}, author = {Insperger, Tam{\'{a}}s and St{\'{e}}p{\'{a}}n, G{\'{a}}bor}, doi = {10.1007/978-1-4614-0335-7}, isbn = {978-1-4614-0334-0}, publisher = {Springer New York}, series = {Applied Mathematical Sciences}, title = {{Semi-Discretization for Time-Delay Systems}}, url = {http://link.springer.com/10.1007/978-1-4614-0335-7}, volume = {178}, year = {2011} } If you are interested in the behaviour of your linear delay model in the presence of Gaussian white noise, please consider the StochasticSemiDiscretizationMethod.jl package. Usage with examples Installation julia > ] add SemiDiscretizationMethod Hayes equations Here (Page 13 of the book) using SemiDiscretizationMethod function createHayesProblem (a,b) AMx = ProportionalMX (a * ones ( 1 , 1 )); τ 1 = 1. BMx1 = DelayMX (τ 1 ,b * ones ( 1 , 1 )); cVec = Additive ( ones ( 1 )) LDDEProblem (AMx,[BMx1],cVec) end hayes_lddep = createHayesProblem ( - 1. , - 1. ); # LDDE problem for Hayes equation method = SemiDiscretization ( 1 , 0.1 ) # 3rd order semi discretization with Δt=0.1 τmax = 1. # the largest τ of the system mapping = DiscreteMapping (hayes_lddep,method,τmax,n_steps = 1 ,calculate_additive = true ); # The discrete mapping of the system @show spectralRadiusOfMapping (mapping); # spectral radius ρ of the mapping matrix (ρ>1 unstable, ρ<1 stable) @show fixPointOfMapping (mapping); # stationary solution of the hayes equation (equilibrium position) # spectralRadiusOfMapping(mapping) = 0.941189374166563 # fixPointOfMapping(mapping) = [0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5] Stability borders of the Hayes Equation using MDBM using Plots gr (); using LaTeXStrings method = SemiDiscretization ( 4 , 0.1 ); τmax = 1. foo (a,b) = log ( spectralRadiusOfMapping ( DiscreteMapping ( createHayesProblem (a,b),method,τmax, n_steps = 1 ))); # No additive term calculated axis = [ Axis ( - 15.0 : 15. , :a ), Axis ( - 15.0 : 15. , :b )] iteration = 3 ; stab_border_points = getinterpolatedsolution ( solve! ( MDBM_Problem (foo,axis),iteration)); scatter (stab_border_points ... ,xlim = ( - 15. , 15. ),ylim = ( - 15. , 15. ), label = " " ,title = " Stability border of the Hayes equation " ,xlabel = L " a " ,ylabel = L " b " , guidefontsize = 14 ,tickfont = font ( 10 ),markersize = 2 ,markerstrokewidth = 0 ) Delay Mathieu equation Here (Page 77 of the book) function createMathieuProblem (δ,ε,b0,a1;T = 2 π) AMx = ProportionalMX (t -> @SMatrix [ 0. 1. ; - δ - ε * cos ( 2 π / T * t) - a1]); τ 1 = 2 π # if function is needed, the use τ1 = t->foo(t) BMx1 = DelayMX (τ 1 ,t -> @SMatrix [ 0. 0. ; b0 0. ]); cVec = Additive (t -> @SVector [ 0. , sin ( 4 π / T * t)]) LDDEProblem (AMx,[BMx1],cVec) end ; τmax = 2 π # the largest τ of the system P = 2 π # Principle period of the system (sin(t)=sin(t+P)) mathieu_lddep = createMathieuProblem ( 3. , 2. , - 0.15 , 0.1 ,T = P); # LDDE problem for Hayes equation method = SemiDiscretization ( 1 , 0.01 ) # 3rd order semi discretization with Δt=0.1 # if P = τmax, then n_steps is automatically calculated mapping = DiscreteMapping (mathieu_lddep,method,τmax, n_steps = Int ((P + 100 eps (P)) ÷ method . Δt),calculate_additive = true ); # The discrete mapping of the system @show spectralRadiusOfMapping (mapping); # spectral radius ρ of the mapping matrix (ρ>1 unstable, ρ<1 stable) # spectralRadiusOfMapping(mapping) = 0.5131596340374617 fp = fixPointOfMapping (mapping); # stationary solution of the hayes equation (equilibrium position) # fixPointOfMapping plotted plot ( 0.0 : method . Δt : P,fp[ 1 : 2 : end ], xlabel = L " -s " ,title = L " t \i n [nP,(n+1)P], \q uad n \t o \i nfty " ,guidefontsize = 14 ,linewidth = 3 , label = L " x(t-s) " ,legendfontsize = 11 ,tickfont = font ( 10 )) plot! ( 0.0 : method . Δt : P,fp[ 2 : 2 : end ], xlabel = L " -s " ,linewidth = 3 , label = L " \d ot{x}(t-s) " ) plot! ( 0.0 : method . Δt : P, sin .( 2 * ( 0.0 : method . Δt : P)),linewidth = 3 ,label = L " \s in(2t) " ) Stability Chart of the delayed Mathieu equation a1 = 0.1 ; ε = 1 ; τmax = 2 π; T = 1 π; method = SemiDiscretization ( 2 ,T / 40 ); foo (δ,b0) = log ( spectralRadiusOfMapping ( DiscreteMapping ( createMathieuProblem (δ,ε,b0,a1,T = T),method,τmax, n_steps = Int ((T + 100 eps (T)) ÷ method . Δt)))); # No additive term calculated axis = [ Axis ( - 1 : 0.2 : 5. ,:δ), Axis ( - 2 : 0.2 : 1.5 , :b0 )] iteration = 3 ; stab_border_points = getinterpolatedsolution ( solve! ( MDBM_Problem (foo,axis),iteration)); scatter (stab_border_points ... ,xlim = ( - 1. , 5 ),ylim = ( - 2. , 1.5 ), label = " " ,title = " Stability border of the delay Mathieu equation " ,xlabel = L " \d elta " ,ylabel = L " b_0 " , guidefontsize = 14 ,tickfont = font ( 10 ),markersize = 2 ,markerstrokewidth = 0 )