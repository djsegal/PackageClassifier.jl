InitialValues.jl: Canonical default initial values and identity elements for Julia InitialValues.jl provides a generic singleton initial value Init(f) that can be used as a₀ in f(a₀, x) . For a binary operator op , it means that Init(op) acts like the identity for any type of x : julia > using InitialValues julia > Init ( + ) + 1 1 julia > 1.0 + Init ( + ) 1.0 julia > foldl ( + , 1 : 3 , init = Init ( + )) 6 Following methods are defined for the binary operators in Base : julia > Init ( * ) * 1 1 julia > Init ( & ) & 1 1 julia > Init ( | ) | 1 1 julia > min ( Init (min), 1 ) 1 julia > max ( Init (max), 1 ) 1 julia > Base . add_sum ( Init (Base . add_sum), 1 ) 1 julia > Base . mul_prod ( Init (Base . mul_prod), 1 ) 1 Init is not called Identity because it is useful to define it for functions that are not binary operator (symmetric in signature). For example, push!! in BangBang.jl defines julia > using BangBang julia > push!! ( Init (push! ! ), 1 ) 1 - element Array{Int64, 1 } : 1 This provides a powerful pattern when combined with foldl : julia > foldl (push! ! , ( 1 , missing , 2.0 ), init = Init (push! ! )) 3 - element Array{Union{Missing, Float64}, 1 } : 1.0 missing 2.0 Transducers.jl extensively uses Init . As binary operators like * in Base are heavily overloaded, creating generic definitions such as above could have introduced method ambiguities. To protect against such situation, InitialValues.jl is tested using Aqua.jl .