AutoViz A package for rendering simple scenes primarily consisting of cars on roadways using Cairo. AutoViz is undergoing significant changes. If you are looking for the version before these changes that is designed around AutomotiveDrivingModels.jl, please checkout the v0.6.0 tag. Installation In julia 1.1+, the preferred way is to add the SISL registry and install AutoViz as follows: ] registry add https : // github . com / sisl / Registry ] add AutoViz You can also manually add all the dependencies: using Pkg Pkg . add ( PackageSpec (url = " https://github.com/sisl/Vec.jl " )) Pkg . add ( PackageSpec (url = " https://github.com/sisl/Records.jl " )) Pkg . add ( PackageSpec (url = " https://github.com/sisl/AutomotiveDrivingModels.jl " )) Pkg . add ( PackageSpec (url = " https://github.com/sisl/AutoViz.jl " )) Usage The main function is render (scene) where scene is an iterable of renderable objects including cars and roadways. Example: roadway = gen_straight_roadway ( 3 , 100.0 ) car = ArrowCar ([ 50.0 , 0.0 ], 0.0 , color = colorant " blue " ) # [north, east], angle render ([roadway, car, " some text " ]) In a jupyter notebook, an image will appear, otherwise see the Saving images section below. A short tutorial is located in notebooks/tutorial.ipynb . Renderable What does it mean to be "renderable"? An object is directly renderable if the function render!(rm::RenderModel, object) is implemented for it. An object is renderable by conversion if convert(Renderable, object) returns a directly renderable object. When render() is invoked, direct renderability is checked with isrenderable(object) , which defaults to method_exists(render!, Tuple{RenderModel, typeof(object)}) . If this check fails, a conversion attempt is made with convert(Renderable, object) . Roadways and ArrowCars The primary basic directly renderable types are Roadway (now from AutomotiveDrivingModels ; soon from Roadways.jl ) and ArrowCar . ArrowCar s are the pink cars with arrows that are in everyone's videos. You can construct one like this: using Colors using AutoViz # x, y, angle and velocity are from your simulation ArrowCar (x, y, angle; color = colorant " green " , text = " v: $velocity " ) How to make types renderable There are two ways to make renderable types. You can make your existing types renderable by conversion by defining convert(::Type{Renderable}, ::MyType) which should return a directly renderable object, e.g. an ArrowCar . You can make types directly renderable by defining render!(::RenderModel, ::MyType) . To make things easier for the compiler, you can also define isrenderable(::Type{MyType}) = true . If you want to allow others to convert to this type to make their types renderable by conversion, make your type a subtype of Renderable . Overlays Overlays will function as in the previous version of AutoViz. They will be rendered last with render!(rendermodel, overlay, scene) . Additional keyword arguments for render() The following additional keyword arguments will accepted by render() : canvas_width canvas_height rendermodel overlays cam - a camera controlling the field of view as in the previous version of AutoViz Saving images Png images can be saved with write_to_png(render(scene), "filename.png") or write_to_svg(render(scene), "filename.svg") . Gif animations may be created with e.g. Reel.jl . RenderModel s The mid-level interface for this package (which is what you will use when you write render!() for your types or when you write an overlay) revolves around adding instructions to a RenderModel . Each instruction consists of a function and a tuple of arguments for the function. This is not documented in this readme, but it is fairly easy to figure out by reading rendermodels.jl , overlays.jl , and arrowcar.jl . Customization AutoViz.jl has two display mode: a "fancy" mode (default) that uses the svg representations in icons/ to display cars and pedestrian, and a more basic mode where cars are rendered as rounded rectangles. To turn-off the fancy mode you can run: AutoViz . set_render_mode ( :basic ) # set to :fancy for fancy mode In addition you can also change the color theme. Three color themes are provided: MONOKAY (default), OFFICETHEME , LIGHTTHEME . You can change the color theme by running: using AutoViz set_color_theme (LIGHTTHEME) You can also define your own color theme using a dictionary. Look at the example in src/colorscheme.jl to have the correct key names.