RayTracer.jl A Ray Tracer written completely in Julia. This allows us to leverage the AD capablities provided by Zygote to differentiate through the Ray Tracer. INSTALLATION The package is currently not registered. So open up a Julia 1.1+ repl and enter the pkg mode. ] add RayTracer For GPU Support ] add RayTracer # ap/gpu TUTORIALS Introductory Rendering Tutorial Inverse Lighting Tutorial Inverse Rendering with Optim.jl Tutorial USAGE EXAMPLES Follow the instructions below to run individual examples or use examples/script.sh to run all of them together. First we need to get the versions of the packages used when these examples were written. $ cd examples $ julia --color=yes -e " using Pkg; Pkg.instantiate() " Now we can run any of the file we need by julia --project=. --color=yes "/path/to/file" Running Individual Examples teapot_rendering.jl -- We need to download the teapot.obj file. wget https://raw.githubusercontent.com/McNopper/OpenGL/master/Binaries/teapot.obj performance_benchmarks.jl -- We need the mesh and texture for the yield sign board. $ mkdir meshes $ cd meshes $ wget https://raw.githubusercontent.com/avik-pal/RayTracer.jl/master/test/meshes/sign_yield.obj $ wget https://raw.githubusercontent.com/avik-pal/RayTracer.jl/master/test/meshes/sign_yield.mtl $ cd .. $ mkdir textures $ cd textures $ wget https://raw.githubusercontent.com/avik-pal/RayTracer.jl/master/test/textures/wood_osb.jpg $ wget https://raw.githubusercontent.com/avik-pal/RayTracer.jl/master/test/textures/sign_yield.png $ cd .. This example requires a few arguments to be passes from command line. Chack them using julia --project=. --color=yes "performance_benchmarks.jl" --help inverse_lighting.jl & optim_compatibility.jl -- We need to the tree.mtl and tree.obj files. $ wget https://raw.githubusercontent.com/tejank10/Duckietown.jl/master/src/meshes/tree.obj $ wget https://raw.githubusercontent.com/tejank10/Duckietown.jl/master/src/meshes/tree.mtl Additional Examples Duckietown.jl uses RayTracer.jl for generating renders of a self-driving car environment. For more complex examples of RayTracer, checkout that project. SUPPORTING AND CITING: This software was developed as part of academic research. If you would like to help support it, please star the repository. If you use this software as part of your research, teaching, or other activities, we would be grateful if you could cite the following: @misc{pal2019raytracerjl, title={{RayTracer.jl: A Differentiable Renderer that supports Parameter Optimization for Scene Reconstruction}}, author={Avik Pal}, year={2019}, eprint={1907.07198}, archivePrefix={arXiv}, primaryClass={cs.GR} } CURRENT ROADMAP These are not listed in any particular order Add more types of common objects (use mesh rendering for this) Add support for rendering arbitrary mesh GPU Support using CuArrays (partially supported in ap/gpu branch) Inverse Rendering Examples Application in Machine Learning Models through Flux (work in progress) Texture Rendering Make everything differentiable: Triangle Mesh