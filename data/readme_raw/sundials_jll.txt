Sundials_jll.jl This is an autogenerated package constructed using BinaryBuilder.jl . Products The code bindings within this package are autogenerated from the following Products defined within the build_tarballs.jl file that generated this package: products = [ LibraryProduct ([ " libsundials_sunlinsoldense " ], :libsundials_sunlinsoldense ), LibraryProduct ([ " libsundials_sunlinsollapackband " ], :libsundials_sunlinsollapackband ), LibraryProduct ([ " libsundials_ida " ], :libsundials_ida ), LibraryProduct ([ " libsundials_sunmatrixdense " ], :libsundials_sunmatrixdense ), LibraryProduct ([ " libsundials_sunlinsolsptfqmr " ], :libsundials_sunlinsolsptfqmr ), LibraryProduct ([ " libsundials_idas " ], :libsundials_idas ), LibraryProduct ([ " libsundials_cvodes " ], :libsundials_cvodes ), LibraryProduct ([ " libsundials_sunlinsolband " ], :libsundials_sunlinsolband ), LibraryProduct ([ " libsundials_arkode " ], :libsundials_arkode ), LibraryProduct ([ " libsundials_sunlinsolspfgmr " ], :libsundials_sunlinsolspfgmr ), LibraryProduct ([ " libsundials_sunnonlinsolfixedpoint " ], :libsundials_sunnonlinsolfixedpoint ), LibraryProduct ([ " libsundials_kinsol " ], :libsundials_kinsol ), LibraryProduct ([ " libsundials_nvecserial " ], :libsundials_nvecserial ), LibraryProduct ([ " libsundials_sunlinsollapackdense " ], :libsundials_sunlinsollapackdense ), LibraryProduct ([ " libsundials_sunmatrixband " ], :libsundials_sunmatrixband ), LibraryProduct ([ " libsundials_cvode " ], :libsundials_cvode ), LibraryProduct ([ " libsundials_nvecmanyvector " ], :libsundials_nvecmanyvector ), LibraryProduct ([ " libsundials_sunmatrixsparse " ], :libsundials_sunmatrixsparse ), LibraryProduct ([ " libsundials_sunnonlinsolnewton " ], :libsundials_sunnonlinsolnewton ), LibraryProduct ([ " libsundials_sunlinsolspgmr " ], :libsundials_sunlinsolspgmr ), LibraryProduct ([ " libsundials_sunlinsolspbcgs " ], :libsundials_sunlinsolspbcgs ), LibraryProduct ([ " libsundials_sunlinsolklu " ], :libsundials_sunlinsolklu ), LibraryProduct ([ " libsundials_sunlinsolpcg " ], :libsundials_sunlinsolpcg ) ] Usage example For example purposes, we will assume that the following products were defined in the imaginary package Example_jll : products = [ FileProduct ( " src/data.txt " , :data_txt ), LibraryProduct ( " libdataproc " , :libdataproc ), ExecutableProduct ( " mungify " , :mungify_exe ) ] With such products defined, Example_jll would contain data_txt , libdataproc and mungify_exe symbols exported. For FileProduct variables, the exported value is a string pointing to the location of the file on-disk. For LibraryProduct variables, it is a string corresponding to the SONAME of the desired library (it will have already been dlopen() 'ed, so typical ccall() usage applies), and for ExecutableProduct variables, the exported value is a function that can be called to set appropriate environment variables. Example: using Example_jll # For file products, you can access its file location directly: data_lines = open (data_txt, " r " ) do io readlines (io) end # For library products, you can use the exported variable name in `ccall()` invocations directly num_chars = ccall (( :count_characters , libdataproc), Cint, (Cstring, Cint), data_lines[ 1 ], length (data_lines[ 1 ])) # For executable products, you can use the exported variable name as a function that you can call mungify_exe () do mungify_exe_path run ( ` $mungify_exe_path $num_chars ` ) end