DistributedFactorGraphs.jl Release Dev Coverage Docs DistributedFactorGraphs.jl provides a flexible factor graph API for use in the Caesar.jl ecosystem. The package supplies: A standardized API for interacting with factor graphs Implementations of the API for in-memory and database-driven operation Visualization extensions to validate the underlying graph Note this package is still under initial development, and will adopt parts of the functionality currently contained in IncrementalInference.jl . Documentation Please see the documentation and the unit tests for examples on using DistributedFactorGraphs.jl. Installation DistributedFactorGraphs can be installed from Julia packages using: add DistributedFactorGraphs Usage DistributedFactorGraphs (DFG) currently supports two implementations: An in-memory factor graphs based on Graphs.jl and LightGraphs.jl A Neo4j-based factor graph based on Neo4j.jl The in-memory implementation is the default. The Neo4j driver can be enabled by importing Neo4j before DFG: # To enable the Neo4j driver, import Neo4j.jl first using Neo4j using DistributedFactorGraphs Both drivers support the same functions, so choose which you want to use when creating your initial DFG. For example: # In-memory DFG dfg = GraphsDFG {NoSolverParams} () addVariable! (dfg, DFGVariable ( :a )) addVariable! (dfg, DFGVariable ( :b )) addFactor! (dfg, [v1, v2], DFGFactor {Int, :Symbol} ( :f1 )) # Rather use a RoME-type factor here (e.g. Pose2Pose2) rather than an Int, this is just for demonstrative purposes. # Neo4j-based DFG dfg = CloudGraphsDFG {NoSolverParams} ( " localhost " , 7474 , " neo4j " , " test " , " testUser " , " testRobot " , " testSession " , nothing , nothing , IncrementalInference . decodePackedType) addVariable! (dfg, DFGVariable ( :a )) addVariable! (dfg, DFGVariable ( :b )) addFactor! (dfg, [v1, v2], DFGFactor {Int, :Symbol} ( :f1 )) # Rather use a RoME-type factor here (e.g. Pose2Pose2) rather than an Int, this is just for demonstrative purposes. Please see the documentation for more information on interacting with the factor graph. Setting up a Quick Neo4j Database The simplest way to set up a test database is with Docker. To pull the Neo4j image: docker pull neo4j To run the image with user neo4j and password test : docker run -d --publish=7474:7474 --publish=7687:7687 --env NEO4J_AUTH=neo4j/test neo4j Note If you just installed docker and having permission issues, please see this ask Ubuntu forum .