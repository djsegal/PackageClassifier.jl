<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content p-5" itemprop="text"><h1><a id="user-content-interestratesjl" class="anchor" aria-hidden="true" href="#interestratesjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>InterestRates.jl</h1>
<p><a href="LICENSE"><img src="https://camo.githubusercontent.com/4440d5deb3a53c4f8661ee765378e6071e7878e8/687474703a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e2e7376673f7374796c653d666c6174" alt="License" data-canonical-src="http://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat" style="max-width:100%;"></a>
<a href="https://travis-ci.org/felipenoris/InterestRates.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9fa90677c13a4c3c0b0a23273ad9b2cfb7588802/68747470733a2f2f7472617669732d63692e6f72672f66656c6970656e6f7269732f496e74657265737452617465732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/felipenoris/InterestRates.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="http://codecov.io/github/felipenoris/InterestRates.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/557f3990b53ad4e46abd80b52f3fa3e30df0310d/687474703a2f2f636f6465636f762e696f2f6769746875622f66656c6970656e6f7269732f496e74657265737452617465732e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/felipenoris/InterestRates.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>Tools for <strong>Term Structure of Interest Rates</strong> calculation, aimed at the valuation of financial contracts,
specially <em>Fixed Income</em> instruments.</p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>InterestRates<span class="pl-pds">"</span></span>)</pre></div>
<h2><a id="user-content-concept" class="anchor" aria-hidden="true" href="#concept"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Concept</h2>
<p>A Term Structure of Interest Rates, also known as <em>zero-coupon curve</em>,
is a function <code>f(t) → y</code> that maps a given maturity <code>t</code> onto the yield <code>y</code> of a bond
that matures at <code>t</code> and pays no coupons (<em>zero-coupon bond</em>).</p>
<p>For instance, say the current price of a bond that pays exactly <code>10</code> in <code>1 year</code> is
<code>9.25</code>. If one buys that bond for the current price and holds it until the maturity
of the contract, that investor will gain <code>0.75</code>, which represents <code>8.11%</code> of the original price. That means that the bond is currently priced with a yield of <code>8.11%</code> <em>per year</em>.</p>
<p>It's not feasible to observe prices for each possible maturity. We can observe only
a set of discrete data points of the yield curve. Therefore, in order to determine
the entire term structure, one must choose an interpolation method, or a term structure model.</p>
<h2><a id="user-content-data-structure-for-interest-rate-curve" class="anchor" aria-hidden="true" href="#data-structure-for-interest-rate-curve"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Data Structure for Interest Rate Curve</h2>
<p>All yield curve calculation is built around <code>AbstractIRCurve</code>. The module expects
that the concrete implementations of <code>AbstractIRCurve</code> provide the following methods:</p>
<ul>
<li><code>curve_get_name(curve::AbstractIRCurve) → String</code></li>
<li><code>curve_get_daycount(curve::AbstractIRCurve) → DayCountConvention</code></li>
<li><code>curve_get_compounding(curve::AbstractIRCurve) → CompoundingType</code></li>
<li><code>curve_get_method(curve::AbstractIRCurve) → CurveMethod</code></li>
<li><code>curve_get_date(curve::AbstractIRCurve) → Date</code>, returns the date when the curve is observed.</li>
<li><code>curve_get_dtm(curve::AbstractIRCurve) → Vector{Int}</code>, used for interpolation methods, returns days_to_maturity on curve's daycount convention.</li>
<li><code>curve_get_zero_rates(curve::AbstractIRCurve) → Vector{Float64}</code>, used for interpolation methods, parameters[i] returns yield for maturity dtm[i].</li>
<li><code>curve_get_model_parameters(curve::AbstractIRCurve) → Vector{Float64}</code>, used for parametric methods, returns model's constant parameters.</li>
</ul>
<p>This package provides a default implementation of <code>AbstractIRCurve</code> interface,
which is a <em>database-friendly</em> data type: <code>IRCurve</code>.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">mutable struct</span> IRCurve <span class="pl-k">&lt;:</span> <span class="pl-c1">AbstractIRCurve</span>
	name<span class="pl-k">::</span><span class="pl-c1">String</span>
	daycount<span class="pl-k">::</span><span class="pl-c1">DayCountConvention</span>
	compounding<span class="pl-k">::</span><span class="pl-c1">CompoundingType</span>
	method<span class="pl-k">::</span><span class="pl-c1">CurveMethod</span>
	date<span class="pl-k">::</span><span class="pl-c1">Date</span>
	dtm<span class="pl-k">::</span><span class="pl-c1">Vector{Int}</span>
	zero_rates<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span>
	parameters<span class="pl-k">::</span><span class="pl-c1">Vector{Float64}</span>
	dict<span class="pl-k">::</span><span class="pl-c1">Dict{Symbol, Any}</span>		<span class="pl-c"><span class="pl-c">#</span> holds pre-calculated values for optimization, or additional parameters.</span>
<span class="pl-c"><span class="pl-c">#</span>...</span></pre></div>
<p>The type <code>DayCountConvention</code> sets the convention on how to count the number of days between dates,
and also how to convert that number of days into a year fraction.</p>
<p>Given an initial date <code>D1</code> and a final date <code>D2</code>, here's how the distance
between <code>D1</code> and <code>D2</code> are mapped into a year fraction for each supported day count convention:</p>
<ul>
<li><em>Actual360</em> : <code>(D2 - D1) / 360</code></li>
<li><em>Actual365</em> : <code>(D2 - D1) / 365</code></li>
<li><em>BDays252</em> : <code>bdays(D1, D2) / 252</code>, where <code>bdays</code> is the business days
between <code>D1</code> and <code>D2</code> from <a href="https://github.com/felipenoris/BusinessDays.jl">BusinessDays.jl package</a>.</li>
</ul>
<p>The type <code>CompoundingType</code> sets the convention on how to convert a yield into an Effective Rate Factor.</p>
<p>Given a yield <code>r</code> and a maturity year fraction <code>t</code>, here's how each supported compounding
type maps the yield to Effective Rate Factors:</p>
<ul>
<li><em>ContinuousCompounding</em> : <code>exp(r*t)</code></li>
<li><em>SimpleCompounding</em> : <code>(1+r*t)</code></li>
<li><em>ExponentialCompounding</em> : <code>(1+r)^t</code></li>
</ul>
<p>The <code>date</code> field sets the date when the Yield Curve is observed. All zero rate calculation
will be performed based on this date.</p>
<p>The fields <code>dtm</code> and <code>zero_rates</code> hold the observed market data for the yield curve,
as discussed on <em>Curve Methods</em> section.</p>
<p>The field <code>parameters</code> holds parameter values for term structure models, as discussed
on <em>Curve Methods</em> section.</p>
<p><code>dict</code> is avaliable for additional parameters, and to hold pre-calculated values for optimization.</p>
<h2><a id="user-content-curve-methods" class="anchor" aria-hidden="true" href="#curve-methods"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Curve Methods</h2>
<p>This package provides the following curve methods.</p>
<p><strong>Interpolation Methods</strong></p>
<ul>
<li><strong>Linear</strong>: provides Linear Interpolation on rates.</li>
<li><strong>FlatForward</strong>: provides Flat Forward interpolation, which is implemented as a Linear Interpolation on the <em>log</em> of discount factors.</li>
<li><strong>StepFunction</strong>: creates a step function around given data points.</li>
<li><strong>CubicSplineOnRates</strong>: provides <em>natural cubic spline</em> interpolation on rates.</li>
<li><strong>CubicSplineOnDiscountFactors</strong>: provides <em>natural cubic spline</em> interpolation on discount factors.</li>
<li><strong>CompositeInterpolation</strong>: provides support for different interpolation methods for: (1) extrapolation before first data point (<code>before_first</code>), (2) interpolation between the first and last point (<code>inner</code>), (3) extrapolation after last data point (<code>after_last</code>).</li>
</ul>
<p>For <em>Interpolation Methods</em>, the field <code>dtm</code> holds the number of days between <code>date</code> and the maturity of the observed yield, following the curve's day count convention, which must be given in advance, when creating an instance of the curve. The field <code>zero_rates</code> holds the yield values for each maturity provided in <code>dtm</code>. All yields must be anual based, and must also be given in advance, when creating the instance of the curve.</p>
<p><strong>Term Structure Models</strong></p>
<ul>
<li><strong>NelsonSiegel</strong>: term structure model based on <em>Nelson, C.R., and A.F. Siegel (1987), Parsimonious Modeling of Yield Curve, The Journal of Business, 60, 473-489</em>.</li>
<li><strong>Svensson</strong>: term structure model based on <em>Svensson, L.E. (1994), Estimating and Interpreting Forward Interest Rates: Sweden 1992-1994, IMF Working Paper, WP/94/114</em>.</li>
</ul>
<p>For <em>Term Structure Models</em>, the field <code>parameters</code> holds the constants defined by each model,
as described below. They must be given in advance, when creating the instance of the curve.</p>
<p>For <strong>NelsonSiegel</strong> method, the array <code>parameters</code> holds the following parameters from the model:</p>
<ul>
<li><strong>beta1</strong> = parameters[1]</li>
<li><strong>beta2</strong> = parameters[2]</li>
<li><strong>beta3</strong> = parameters[3]</li>
<li><strong>lambda</strong> = parameters[4]</li>
</ul>
<p>For <strong>Svensson</strong> method, the array <code>parameters</code> hold the following parameters from the model:</p>
<ul>
<li><strong>beta1</strong> = parameters[1]</li>
<li><strong>beta2</strong> = parameters[2]</li>
<li><strong>beta3</strong> = parameters[3]</li>
<li><strong>beta4</strong> = parameters[4]</li>
<li><strong>lambda1</strong> = parameters[5]</li>
<li><strong>lambda2</strong> = parameters[6]</li>
</ul>
<h3><a id="user-content-methods-hierarchy" class="anchor" aria-hidden="true" href="#methods-hierarchy"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Methods hierarchy</h3>
<p>As a summary, curve methods are organized by the following hierarchy.</p>
<ul>
<li><code>&lt;&lt;CurveMethod&gt;&gt;</code>
<ul>
<li><code>&lt;&lt;Interpolation&gt;&gt;</code>
<ul>
<li><code>&lt;&lt;DiscountFactorInterpolation&gt;&gt;</code>
<ul>
<li><code>CubicSplineOnDiscountFactors</code></li>
<li><code>FlatForward</code></li>
</ul>
</li>
<li><code>&lt;&lt;RateInterpolation&gt;&gt;</code>
<ul>
<li><code>CubicSplineOnRates</code></li>
<li><code>Linear</code></li>
<li><code>StepFunction</code></li>
</ul>
</li>
<li><code>CompositeInterpolation</code></li>
</ul>
</li>
<li><code>&lt;&lt;Parametric&gt;&gt;</code>
<ul>
<li><code>NelsonSiegel</code></li>
<li><code>Svensson</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> InterestRates

<span class="pl-c"><span class="pl-c">#</span> First, create a curve instance.</span>

vert_x <span class="pl-k">=</span> [<span class="pl-c1">11</span>, <span class="pl-c1">15</span>, <span class="pl-c1">50</span>, <span class="pl-c1">80</span>] <span class="pl-c"><span class="pl-c">#</span> for interpolation methods, represents the days to maturity</span>
vert_y <span class="pl-k">=</span> [<span class="pl-c1">0.10</span>, <span class="pl-c1">0.15</span>, <span class="pl-c1">0.14</span>, <span class="pl-c1">0.17</span>] <span class="pl-c"><span class="pl-c">#</span> yield values</span>

dt_curve <span class="pl-k">=</span> <span class="pl-c1">Date</span>(<span class="pl-c1">2015</span>,<span class="pl-c1">08</span>,<span class="pl-c1">03</span>)

mycurve <span class="pl-k">=</span> InterestRates<span class="pl-k">.</span><span class="pl-c1">IRCurve</span>(<span class="pl-s"><span class="pl-pds">"</span>dummy-simple-linear<span class="pl-pds">"</span></span>, InterestRates<span class="pl-k">.</span><span class="pl-c1">Actual365</span>(),
	InterestRates<span class="pl-k">.</span><span class="pl-c1">SimpleCompounding</span>(), InterestRates<span class="pl-k">.</span><span class="pl-c1">Linear</span>(), dt_curve,
	vert_x, vert_y)

<span class="pl-c"><span class="pl-c">#</span> yield for a given maturity date</span>
y <span class="pl-k">=</span> <span class="pl-c1">zero_rate</span>(mycurve, <span class="pl-c1">Date</span>(<span class="pl-c1">2015</span>,<span class="pl-c1">08</span>,<span class="pl-c1">25</span>))
<span class="pl-c"><span class="pl-c">#</span> 0.148</span>

<span class="pl-c"><span class="pl-c">#</span> forward rate between two future dates</span>
fy <span class="pl-k">=</span> <span class="pl-c1">forward_rate</span>(mycurve, <span class="pl-c1">Date</span>(<span class="pl-c1">2015</span>,<span class="pl-c1">08</span>,<span class="pl-c1">25</span>), <span class="pl-c1">Date</span>(<span class="pl-c1">2015</span>, <span class="pl-c1">10</span>, <span class="pl-c1">10</span>))
<span class="pl-c"><span class="pl-c">#</span> 0.16134333771591897</span>

<span class="pl-c"><span class="pl-c">#</span> Discount factor for a given maturity date</span>
df <span class="pl-k">=</span> <span class="pl-c1">discountfactor</span>(mycurve, <span class="pl-c1">Date</span>(<span class="pl-c1">2015</span>,<span class="pl-c1">10</span>,<span class="pl-c1">10</span>))
<span class="pl-c"><span class="pl-c">#</span> 0.9714060637029466</span>

<span class="pl-c"><span class="pl-c">#</span> Effective Rate Factor for a given maturity</span>
erf <span class="pl-k">=</span> <span class="pl-c1">ERF</span>(mycurve, <span class="pl-c1">Date</span>(<span class="pl-c1">2015</span>,<span class="pl-c1">10</span>,<span class="pl-c1">10</span>))
<span class="pl-c"><span class="pl-c">#</span> 1.0294356164383562</span>

<span class="pl-c"><span class="pl-c">#</span> Effective Rate for a given maturity</span>
er <span class="pl-k">=</span> <span class="pl-c1">ER</span>(mycurve, <span class="pl-c1">Date</span>(<span class="pl-c1">2015</span>,<span class="pl-c1">10</span>,<span class="pl-c1">10</span>))
<span class="pl-c"><span class="pl-c">#</span> 0.029435616438356238</span></pre></div>
<p>See <code>runtests.jl</code> for more examples.</p>
<h2><a id="user-content-buffered-curve" class="anchor" aria-hidden="true" href="#buffered-curve"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Buffered Curve</h2>
<p>A <code>BufferedIRCurve</code> buffers results of interest rate interpolations.</p>
<p>You can create it by using <code>InterestRates.BufferedIRCurve(source_curve)</code> constructor,
where <code>source_courve</code> is a given <code>AbstractIRCurve</code>.</p>
<p>The first time you ask for a rate, discount factor or effective factor for a given maturity,
it will apply the source curve computation method. The second time you ask for any information
for the same maturity, it will use the cached value.</p>
<p><strong>Example:</strong></p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> InterestRates, BusinessDays
<span class="pl-k">const</span> ir <span class="pl-k">=</span> InterestRates

curve_date <span class="pl-k">=</span> <span class="pl-c1">Date</span>(<span class="pl-c1">2017</span>,<span class="pl-c1">3</span>,<span class="pl-c1">2</span>)
days_to_maturity <span class="pl-k">=</span> [ <span class="pl-c1">1</span>, <span class="pl-c1">22</span>, <span class="pl-c1">83</span>, <span class="pl-c1">147</span>, <span class="pl-c1">208</span>, <span class="pl-c1">269</span>,
                     <span class="pl-c1">332</span>, <span class="pl-c1">396</span>, <span class="pl-c1">458</span>, <span class="pl-c1">519</span>, <span class="pl-c1">581</span>, <span class="pl-c1">711</span>, <span class="pl-c1">834</span>]
rates <span class="pl-k">=</span> [ <span class="pl-c1">0.1213</span>, <span class="pl-c1">0.121875</span>, <span class="pl-c1">0.11359</span> , <span class="pl-c1">0.10714</span> , <span class="pl-c1">0.10255</span> , <span class="pl-c1">0.100527</span>,
<span class="pl-c1">0.09935</span> , <span class="pl-c1">0.09859</span> , <span class="pl-c1">0.098407</span>, <span class="pl-c1">0.098737</span>, <span class="pl-c1">0.099036</span>, <span class="pl-c1">0.099909</span>, <span class="pl-c1">0.101135</span>]

method <span class="pl-k">=</span> ir<span class="pl-k">.</span><span class="pl-c1">CompositeInterpolation</span>(ir<span class="pl-k">.</span><span class="pl-c1">StepFunction</span>(), <span class="pl-c"><span class="pl-c">#</span> before-first</span>
                                   ir<span class="pl-k">.</span><span class="pl-c1">CubicSplineOnRates</span>(), <span class="pl-c"><span class="pl-c">#</span>inner</span>
                                   ir<span class="pl-k">.</span><span class="pl-c1">FlatForward</span>()) <span class="pl-c"><span class="pl-c">#</span> after-last</span>

curve_brl <span class="pl-k">=</span> ir<span class="pl-k">.</span><span class="pl-c1">IRCurve</span>(<span class="pl-s"><span class="pl-pds">"</span>Curve BRL<span class="pl-pds">"</span></span>, <span class="pl-c"><span class="pl-c">#</span> name</span>
    ir<span class="pl-k">.</span><span class="pl-c1">BDays252</span>(<span class="pl-c1">:Brazil</span>), <span class="pl-c"><span class="pl-c">#</span> DayCountConvention</span>
    ir<span class="pl-k">.</span><span class="pl-c1">ExponentialCompounding</span>(), <span class="pl-c"><span class="pl-c">#</span> CompoundingType</span>
    method, <span class="pl-c"><span class="pl-c">#</span> interpolation method</span>
    curve_date, <span class="pl-c"><span class="pl-c">#</span> base date</span>
    days_to_maturity,
    rates);

fixed_maturity <span class="pl-k">=</span> <span class="pl-c1">Date</span>(<span class="pl-c1">2018</span>,<span class="pl-c1">5</span>,<span class="pl-c1">3</span>)
<span class="pl-c1">@elapsed</span> <span class="pl-c1">discountfactor</span>(curve_brl, fixed_maturity)
<span class="pl-c"><span class="pl-c">#</span> 0.178632414</span>

buffered_curve_brl <span class="pl-k">=</span> ir<span class="pl-k">.</span><span class="pl-c1">BufferedIRCurve</span>(curve_brl)
<span class="pl-c1">discountfactor</span>(buffered_curve_brl, fixed_maturity) <span class="pl-c"><span class="pl-c">#</span> stores in cache</span>
<span class="pl-c1">@elapsed</span> <span class="pl-c1">discountfactor</span>(buffered_curve_brl, fixed_maturity) <span class="pl-c"><span class="pl-c">#</span> retrieves stored value in cache</span>
<span class="pl-c"><span class="pl-c">#</span> 3.683e-5</span></pre></div>
<h2><a id="user-content-composite-curves" class="anchor" aria-hidden="true" href="#composite-curves"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Composite Curves</h2>
<p><em>Warning: This is an experimental feature. The API may change in the future.</em></p>
<p><code>InterestRates.CompositeIRCurve(curve_a, curve_b, ...)</code> will return a composite curve.</p>
<p>Calling <code>discountfactor</code> or <code>ERF</code> on a composite curve will return the product of the results
of these functions for each curve inside a composite curve.</p>
<h2><a id="user-content-alternative-libraries" class="anchor" aria-hidden="true" href="#alternative-libraries"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Alternative Libraries</h2>
<ul>
<li><em>Ito.jl</em> : <a href="https://github.com/aviks/Ito.jl">https://github.com/aviks/Ito.jl</a></li>
<li><em>FinancialMarkets.jl</em> : <a href="https://github.com/imanuelcostigan/FinancialMarkets.jl">https://github.com/imanuelcostigan/FinancialMarkets.jl</a></li>
</ul>
</article></div>