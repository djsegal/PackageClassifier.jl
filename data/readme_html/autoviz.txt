<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content p-5" itemprop="text"><h1><a id="user-content-autoviz" class="anchor" aria-hidden="true" href="#autoviz"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>AutoViz</h1>
<p><a href="https://travis-ci.org/sisl/AutoViz.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c82b0c3663738eba27f2c5811872005d88901d26/68747470733a2f2f7472617669732d63692e6f72672f7369736c2f4175746f56697a2e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/sisl/AutoViz.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/r/sisl/AutoViz.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b1687a3817a920528f406d695a29e76154a3bbd1/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f7369736c2f4175746f56697a2e6a6c2f62616467652e737667" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/sisl/AutoViz.jl/badge.svg" style="max-width:100%;"></a>
<a href="https://sisl.github.io/AutoViz.jl/latest" rel="nofollow"><img src="https://camo.githubusercontent.com/57bae07ecd50a99519ad0516d91f4ec8f0f48e12/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-latest-blue.svg" style="max-width:100%;"></a></p>
<p>A package for rendering simple scenes primarily consisting of cars on roadways using Cairo.</p>
<p>AutoViz is undergoing significant changes. If you are looking for the version before these changes that is designed around AutomotiveDrivingModels.jl, please checkout the v0.6.0 tag.</p>
<p><a target="_blank" rel="noopener noreferrer" href="readmeimage.png"><img src="readmeimage.png" alt="AutoViz" style="max-width:100%;"></a></p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<p>In julia 1.1+, the preferred way is to add the SISL registry and install AutoViz as follows:</p>
<div class="highlight highlight-source-julia"><pre>] registry add https<span class="pl-k">:</span><span class="pl-k">//</span>github<span class="pl-k">.</span>com<span class="pl-k">/</span>sisl<span class="pl-k">/</span>Registry
] add AutoViz</pre></div>
<p>You can also manually add all the dependencies:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Pkg
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-c1">PackageSpec</span>(url<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>https://github.com/sisl/Vec.jl<span class="pl-pds">"</span></span>))
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-c1">PackageSpec</span>(url<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>https://github.com/sisl/Records.jl<span class="pl-pds">"</span></span>))
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-c1">PackageSpec</span>(url<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>https://github.com/sisl/AutomotiveDrivingModels.jl<span class="pl-pds">"</span></span>))
Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-c1">PackageSpec</span>(url<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>https://github.com/sisl/AutoViz.jl<span class="pl-pds">"</span></span>))</pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>
<p>The main function is</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">render</span>(scene)</pre></div>
<p>where scene is an iterable of renderable objects including cars and roadways.</p>
<p>Example:</p>
<div class="highlight highlight-source-julia"><pre>roadway <span class="pl-k">=</span> <span class="pl-c1">gen_straight_roadway</span>(<span class="pl-c1">3</span>, <span class="pl-c1">100.0</span>)
car <span class="pl-k">=</span> <span class="pl-c1">ArrowCar</span>([<span class="pl-c1">50.0</span>, <span class="pl-c1">0.0</span>], <span class="pl-c1">0.0</span>, color<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">colorant</span>"</span>blue<span class="pl-pds">"</span></span>) <span class="pl-c"><span class="pl-c">#</span> [north, east], angle</span>
<span class="pl-c1">render</span>([roadway, car, <span class="pl-s"><span class="pl-pds">"</span>some text<span class="pl-pds">"</span></span>])</pre></div>
<p>In a jupyter notebook, an image will appear, otherwise see the <a href="#saving-images">Saving images</a> section below. A short tutorial is located in <a href="notebooks/tutorial.ipynb">notebooks/tutorial.ipynb</a>.</p>
<h2><a id="user-content-renderable" class="anchor" aria-hidden="true" href="#renderable"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Renderable</h2>
<p><em>What does it mean to be "renderable"?</em></p>
<p>An object is <em>directly renderable</em> if the function <code>render!(rm::RenderModel, object)</code> is implemented for it.</p>
<p>An object is <em>renderable by conversion</em> if <code>convert(Renderable, object)</code> returns a directly renderable object.</p>
<p>When <code>render()</code> is invoked, direct renderability is checked with <code>isrenderable(object)</code>, which defaults to <code>method_exists(render!, Tuple{RenderModel, typeof(object)})</code>. If this check fails, a conversion attempt is made with <code>convert(Renderable, object)</code>.</p>
<h3><a id="user-content-roadways-and-arrowcars" class="anchor" aria-hidden="true" href="#roadways-and-arrowcars"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Roadways and ArrowCars</h3>
<p>The primary basic directly renderable types are <code>Roadway</code> (now from <code>AutomotiveDrivingModels</code>; soon from <code>Roadways.jl</code>) and <code>ArrowCar</code>.</p>
<p><code>ArrowCar</code>s are the pink cars with arrows that are in everyone's videos. You can construct one like this:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> Colors
<span class="pl-k">using</span> AutoViz

<span class="pl-c"><span class="pl-c">#</span> x, y, angle and velocity are from your simulation</span>

<span class="pl-c1">ArrowCar</span>(x, y, angle; color<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds"><span class="pl-c1">colorant</span>"</span>green<span class="pl-pds">"</span></span>, text<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>v: <span class="pl-v">$velocity</span><span class="pl-pds">"</span></span>)</pre></div>
<h3><a id="user-content-how-to-make-types-renderable" class="anchor" aria-hidden="true" href="#how-to-make-types-renderable"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>How to make types renderable</h3>
<p>There are two ways to make renderable types.</p>
<ol>
<li>You can make your existing types renderable by conversion by defining <code>convert(::Type{Renderable}, ::MyType)</code> which should return a directly renderable object, e.g. an <code>ArrowCar</code>.</li>
<li>You can make types directly renderable by defining <code>render!(::RenderModel, ::MyType)</code>. To make things easier for the compiler, you can also define <code>isrenderable(::Type{MyType}) = true</code>. If you want to allow others to convert to this type to make their types renderable by conversion, make your type a subtype of <code>Renderable</code>.</li>
</ol>
<h2><a id="user-content-overlays" class="anchor" aria-hidden="true" href="#overlays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Overlays</h2>
<p>Overlays will function as in the previous version of AutoViz. They will be rendered last with <code>render!(rendermodel, overlay, scene)</code>.</p>
<h2><a id="user-content-additional-keyword-arguments-for-render" class="anchor" aria-hidden="true" href="#additional-keyword-arguments-for-render"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Additional keyword arguments for <code>render()</code></h2>
<p>The following additional keyword arguments will accepted by <code>render()</code>:</p>
<ul>
<li><code>canvas_width</code></li>
<li><code>canvas_height</code></li>
<li><code>rendermodel</code></li>
<li><code>overlays</code></li>
<li><code>cam</code> - a camera controlling the field of view as in the previous version of AutoViz</li>
</ul>
<h2><a id="user-content-saving-images" class="anchor" aria-hidden="true" href="#saving-images"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Saving images</h2>
<p>Png images can be saved with <code>write_to_png(render(scene), "filename.png")</code> or <code>write_to_svg(render(scene), "filename.svg")</code>.
Gif animations may be created with e.g. <a href="https://github.com/shashi/Reel.jl">Reel.jl</a>.</p>
<h2><a id="user-content-rendermodels" class="anchor" aria-hidden="true" href="#rendermodels"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>RenderModel</code>s</h2>
<p>The mid-level interface for this package (which is what you will use when you write <code>render!()</code> for your types or when you write an overlay) revolves around adding instructions to a <code>RenderModel</code>. Each instruction consists of a function and a tuple of arguments for the function. This is not documented in this readme, but it is fairly easy to figure out by reading <code>rendermodels.jl</code>, <code>overlays.jl</code>, and <code>arrowcar.jl</code>.</p>
<h2><a id="user-content-customization" class="anchor" aria-hidden="true" href="#customization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Customization</h2>
<p>AutoViz.jl has two display mode: a "fancy" mode (default) that uses the svg representations in <code>icons/</code> to display cars and pedestrian, and a more basic mode where cars are rendered as rounded rectangles. To turn-off the fancy mode you can run:</p>
<div class="highlight highlight-source-julia"><pre>AutoViz<span class="pl-k">.</span><span class="pl-c1">set_render_mode</span>(<span class="pl-c1">:basic</span>) <span class="pl-c"><span class="pl-c">#</span> set to :fancy for fancy mode</span></pre></div>
<p>In addition you can also change the color theme. Three color themes are provided: <code>MONOKAY</code> (default), <code>OFFICETHEME</code>, <code>LIGHTTHEME</code>. You can change the color theme by running:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">using</span> AutoViz
<span class="pl-c1">set_color_theme</span>(LIGHTTHEME)</pre></div>
<p>You can also define your own color theme using a dictionary. Look at the example in <code>src/colorscheme.jl</code> to have the correct key names.</p>
</article></div>