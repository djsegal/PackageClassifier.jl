<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content p-5" itemprop="text"><h1><a id="user-content-dashboards" class="anchor" aria-hidden="true" href="#dashboards"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Dashboards</h1>
<p>Julia backend for <a href="https://github.com/plotly/dash">Plotly Dash</a>
It is in its early development phase so any bugs may arise, please report me about issues</p>
<h2><a id="user-content-version-025-released" class="anchor" aria-hidden="true" href="#version-025-released"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Version 0.2.5 released</h2>
<ul>
<li>
<p>Now you can use <code>PlotlyBase.Plot</code> to work with the <code>figure</code> property of the <code>dcc_graph</code> component. Examples are: <a href="https://github.com/waralex/DashboardsExamples/blob/master/dash_tutorial/2_dash_layout_4.jl">Plot usage in layout</a>, <a href="https://github.com/waralex/DashboardsExamples/blob/master/dash_tutorial/3_basic_dash_callbacks_2.jl">Plot usage in callback</a></p>
</li>
<li>
<p>Added <code>PreventUpdate</code> exception and <code>no_update()</code> function to prevent updates in callback. See <a href="https://github.com/waralex/DashboardsExamples/blob/master/dash_tutorial/4_state_and_prevent_update_3.jl">PreventUpdate example</a> and <a href="https://github.com/waralex/DashboardsExamples/blob/master/dash_tutorial/4_state_and_prevent_update_3.jl">no_update() example</a></p>
</li>
<li>
<p>Most of dashboards from <a href="https://dash.plot.ly/" rel="nofollow">Dash Tutorial</a> are implemented using Dashboards.jl. See <a href="https://github.com/waralex/DashboardsExamples">DashboardsExamples repo</a></p>
</li>
</ul>
<h2><a id="user-content-instalation" class="anchor" aria-hidden="true" href="#instalation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Instalation</h2>
<p>Julia version &gt;= 1.2 is required.
It also works in 1.1 now, but I do not plan testing and support for versions under 1.2</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-k">import</span> Pkg; Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(Pkg<span class="pl-k">.</span><span class="pl-c1">PackageSpec</span>(url <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>https://github.com/waralex/Dashboards.jl.git<span class="pl-pds">"</span></span>))</pre></div>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>
<h3><a id="user-content-basic-application" class="anchor" aria-hidden="true" href="#basic-application"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Basic application</h3>
<pre lang="jldoctest"><code>julia&gt; import HTTP
julia&gt; using Dashboards
julia&gt; app = Dash("Test app", external_stylesheets = ["https://codepen.io/chriddyp/pen/bWLwgP.css"]) do
    html_div() do
        html_h1("Hello Dashboards"),
        html_div("Dashboards: Julia interface for Dash"),
        dcc_graph(
            id = "example-graph",
            figure = (
                data = [
                    (x = [1, 2, 3], y = [4, 1, 2], type = "bar", name = "SF"),
                    (x = [1, 2, 3], y = [2, 4, 5], type = "bar", name = "Montr√©al"),
                ],
                layout = (title = "Dash Data Visualization",)
            )
        )
    end
end
julia&gt; handler = make_handler(app, debug = true)
julia&gt; HTTP.serve(handler, HTTP.Sockets.localhost, 8080)
# Now go to http://127.0.0.1:8080 in your browser to see the Dashboard.
</code></pre>
<ul>
<li>The <code>Dash</code> struct represent dashboard application.</li>
<li>The constructor for <code>Dash</code> struct is <code>Dash(layout_maker::Function, name::String;  external_stylesheets::Vector{String} = Vector{String}(), url_base_pathname="/", assets_folder::String = "assets")</code> where <code>layout_maker</code> is a function with signature ()::Component</li>
<li>Unlike the python version where each Dash component is represented as a separate class, all components in Dashboard are represented by struct <code>Component</code>.</li>
<li>You can create <code>Component</code> specific for concrete Dash component by the set of functions in the form <code>lowercase(&lt;component package&gt;)_lowercase(&lt;component name&gt;)</code>. For example, in python html <code>&lt;div&gt;</code> element is represented as <code>HTML.Div</code> in Dasboards it is created using function <code>html_div</code></li>
<li>The list of all supported components is available in docstring for Dasboards module</li>
<li>All functions for a component creation have the signature <code>(;kwargs...)::Component</code>. List of key arguments specific for the concrete component is available in the docstring for each function</li>
<li>Functions for creation components which have <code>children</code> property have two additional methods <code>(children::Any; kwargs...)::Component</code> and <code>(children_maker::Function; kwargs..)::Component</code>. <code>children</code> must by string or number or single component or collection of components</li>
<li><code>make_handler(app::Dash; debug::Bool = false)</code> makes handler function for using in HTTP package</li>
</ul>
<p><strong>Once you have run the code to create the Dashboard, go to <code>http://127.0.0.1:8080</code> in your browser to view the Dashboard!</strong></p>
<h3><a id="user-content-basic-callback" class="anchor" aria-hidden="true" href="#basic-callback"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Basic Callback</h3>
<pre lang="jldoctest"><code>julia&gt; import HTTP
julia&gt; using Dashboards
julia&gt; app = Dash("Test app", external_stylesheets = ["https://codepen.io/chriddyp/pen/bWLwgP.css"]) do
    html_div() do
        dcc_input(id = "my-id", value="initial value", type = "text"),
        html_div(id = "my-div")        
    end
end
julia&gt; callback!(app, callid"my-id.value =&gt; my-div.children") do input_value
    "You've entered $(input_value)"
end
julia&gt; handler = make_handler(app, debug = true)
julia&gt; HTTP.serve(handler, HTTP.Sockets.localhost, 8080)
</code></pre>
<ul>
<li>You can make your dashboard interactive by register callbacks for changes in frontend with function <code>callback!(func::Function, app::Dash, id::CallbackId)</code></li>
<li>Inputs and outputs (and states, see below) of callback are described by struct <code>CallbackId</code> which can easily created by string macro <code>callid""</code></li>
<li><code>callid""</code> parse string in form <code>"[{state1 [,...]}] input1[,...] =&gt; output1[,...]"</code> where all items is <code>"&lt;element id&gt;.&lt;property name&gt;"</code></li>
<li>Callback function must have the signature(states..., inputs...) and return data for output</li>
</ul>
<h3><a id="user-content-states-and-multiple-outputs" class="anchor" aria-hidden="true" href="#states-and-multiple-outputs"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>States and Multiple Outputs</h3>
<pre lang="jldoctest"><code>julia&gt; import HTTP
julia&gt; using Dashboards
julia&gt; app = Dash("Test app", external_stylesheets = ["https://codepen.io/chriddyp/pen/bWLwgP.css"]) do
    html_div() do
        dcc_input(id = "my-id", value="initial value", type = "text"),
        html_div(id = "my-div"),
        html_div(id = "my-div2")        
    end
end
julia&gt; callback!(app, callid"{my-id.type} my-id.value =&gt; my-div.children, my-div2.children") do state_value, input_value
    "You've entered $(input_value) in input with type $(state_value)",
    "You've entered $(input_value)"
end
julia&gt; handler = make_handler(app, debug = true)
julia&gt; HTTP.serve(handler, HTTP.Sockets.localhost, 8080)
</code></pre>
<ul>
<li>For multiple output callback must return any collection with element for each output</li>
</ul>
<h2><a id="user-content-comparation-with-original-python-syntax" class="anchor" aria-hidden="true" href="#comparation-with-original-python-syntax"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Comparation with original python syntax</h2>
<h3><a id="user-content-component-naming" class="anchor" aria-hidden="true" href="#component-naming"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>component naming:</h3>
<p><code>html.Div</code> =&gt; <code>html_div</code>, <code>dcc.Graph</code> =&gt; <code>dcc_graph</code> and etc</p>
<h3><a id="user-content-component-creation" class="anchor" aria-hidden="true" href="#component-creation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>component creation:</h3>
<p>Just like in Python, functions for creating components have keywords arguments, which are the same as in Python. <code>html_div(id="my-id", children="Simple text")</code>.
For components that have <code>children</code> prop, two additional signatures are available. <code>(children; kwargs..)</code> and <code>(children_maker::Function; kwargs...)</code> so You can write <code>html_div("Simple text", id="my-id")</code>  for simple elements or avoid the hell of nested brackets with <code>do</code> syntax for complex elements:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">html_div</span>(id<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>outer-div<span class="pl-pds">"</span></span>) <span class="pl-k">do</span>
    <span class="pl-c1">html_h1</span>(<span class="pl-s"><span class="pl-pds">"</span>Welcome<span class="pl-pds">"</span></span>),
    <span class="pl-c1">html_div</span>(id<span class="pl-k">=</span><span class="pl-s"><span class="pl-pds">"</span>inner-div<span class="pl-pds">"</span></span>) <span class="pl-k">do</span>
    <span class="pl-k">......</span>
    <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<h3><a id="user-content-application-and-layout" class="anchor" aria-hidden="true" href="#application-and-layout"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>application and layout:</h3>
<ul>
<li>python:</li>
</ul>
<div class="highlight highlight-source-python"><pre>app <span class="pl-k">=</span> dash.Dash(<span class="pl-s"><span class="pl-pds">"</span>Test<span class="pl-pds">"</span></span>, <span class="pl-v">external_stylesheets</span><span class="pl-k">=</span>external_stylesheets)
app.layout <span class="pl-k">=</span> html.Div(<span class="pl-v">children</span><span class="pl-k">=</span>[<span class="pl-c1">...</span>.])</pre></div>
<ul>
<li>Dashboards:</li>
</ul>
<div class="highlight highlight-source-julia"><pre>app <span class="pl-k">=</span> <span class="pl-c1">Dash</span>(<span class="pl-s"><span class="pl-pds">"</span>Test<span class="pl-pds">"</span></span>, external_stylesheets<span class="pl-k">=</span>external_stylesheets) <span class="pl-k">do</span>
   <span class="pl-c1">html_div</span>() <span class="pl-k">do</span>
    <span class="pl-k">......</span>
   <span class="pl-k">end</span>
<span class="pl-k">end</span></pre></div>
<h3><a id="user-content-callbacks" class="anchor" aria-hidden="true" href="#callbacks"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>callbacks:</h3>
<ul>
<li>python:</li>
</ul>
<div class="highlight highlight-source-python"><pre><span class="pl-en">@app.callback</span>(Output(<span class="pl-s"><span class="pl-pds">'</span>output<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>children<span class="pl-pds">'</span></span>),
              [Input(<span class="pl-s"><span class="pl-pds">'</span>submit-button<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>n_clicks<span class="pl-pds">'</span></span>)],
              [State(<span class="pl-s"><span class="pl-pds">'</span>state-1<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>value<span class="pl-pds">'</span></span>),
               State(<span class="pl-s"><span class="pl-pds">'</span>state-2<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>value<span class="pl-pds">'</span></span>)])
<span class="pl-k">def</span> <span class="pl-en">update_output</span>(<span class="pl-smi">n_clicks</span>, <span class="pl-smi">state1</span>, <span class="pl-smi">state2</span>):
<span class="pl-c1">...</span>..
</pre></div>
<ul>
<li>Dashboards:</li>
</ul>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">callback!</span>(app, <span class="pl-s"><span class="pl-pds"><span class="pl-c1">callid</span>"""</span>{state1.value, state2.value} </span>
<span class="pl-s">                                   submit-button.n_clicks </span>
<span class="pl-s">                                   =&gt; output.children<span class="pl-pds">"""</span></span> ) <span class="pl-k">do</span> state1, state2, n_clicks
<span class="pl-k">.....</span>
<span class="pl-k">end</span></pre></div>
<p>Be careful - in Dashboards states came first in arguments list</p>
<h3><a id="user-content-json" class="anchor" aria-hidden="true" href="#json"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>json:</h3>
<p>I use JSON2 for json serialization/deserialization, so in callbacks all json objects are NamedTuples not Dicts. In component props you can use both Dicts and NamedTuples for json objects. But be careful with single property objects: <code>layout = (title = "Test graph")</code> is not interpreted as NamedTuple by Julia  - you need add comma at the end <code>layout = (title = "Test graph",)</code></p>
</article></div>