<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content p-5" itemprop="text"><p><a href="https://travis-ci.org/matthieugomez/StringDistances.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/feff8f82311e41126dad57a74a528cc7f62faebf/68747470733a2f2f7472617669732d63692e6f72672f6d61747468696575676f6d657a2f537472696e6744697374616e6365732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/matthieugomez/StringDistances.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://coveralls.io/r/matthieugomez/StringDistances.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/99feef725944ed3a1e68d5ee95cbd02760330e9a/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6d61747468696575676f6d657a2f537472696e6744697374616e6365732e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status" data-canonical-src="https://coveralls.io/repos/matthieugomez/StringDistances.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<h2><a id="user-content-installation" class="anchor" aria-hidden="true" href="#installation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Installation</h2>
<p>The package is registered in the <a href="https://github.com/JuliaRegistries/General"><code>General</code></a> registry and so can be installed at the REPL with <code>] add StringDistances</code>.</p>
<h2><a id="user-content-evaluate" class="anchor" aria-hidden="true" href="#evaluate"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Evaluate</h2>
<p>The function <code>evaluate</code> returns the distance between two strings. Its syntax is:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">evaluate</span>(dist, s1, s2)</pre></div>
<p>where <code>s1</code> and <code>s2</code> can be any iterator with a <code>length</code> method (e.g. <code>AbstractString</code>, <code>GraphemeIterator</code>, <code>AbstractVector</code>...), and <code>dist</code> is one of the following distances:</p>
<ul>
<li>
<p>Edit Distances</p>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Jaro%E2%80%93Winkler_distance" rel="nofollow">Jaro Distance</a> <code>Jaro()</code></li>
<li><a href="https://en.wikipedia.org/wiki/Levenshtein_distance" rel="nofollow">Levenshtein Distance</a> <code>Levenshtein()</code></li>
<li><a href="https://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance" rel="nofollow">Damerau-Levenshtein Distance</a> <code>DamerauLevenshtein()</code></li>
<li><a href="https://xlinux.nist.gov/dads/HTML/ratcliffObershelp.html" rel="nofollow">RatcliffObershelp Distance</a> <code>RatcliffObershelp()</code></li>
</ul>
</li>
<li>
<p>Q-gram distances compare the set of all substrings of length <code>q</code> in each string.</p>
<ul>
<li>QGram Distance <code>Qgram(q::Int)</code></li>
<li><a href="https://en.wikipedia.org/wiki/Cosine_similarity" rel="nofollow">Cosine Distance</a> <code>Cosine(q::Int)</code></li>
<li><a href="https://en.wikipedia.org/wiki/Jaccard_index" rel="nofollow">Jaccard Distance</a> <code>Jaccard(q::Int)</code></li>
<li><a href="https://en.wikipedia.org/wiki/Overlap_coefficient" rel="nofollow">Overlap Distance</a> <code>Overlap(q::Int)</code></li>
<li><a href="https://en.wikipedia.org/wiki/S%C3%B8rensen%E2%80%93Dice_coefficient" rel="nofollow">Sorensen-Dice Distance</a> <code>SorensenDice(q::Int)</code></li>
</ul>
</li>
<li>
<p>The package includes distance "modifiers", that can be applied to any distance.</p>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Jaro%E2%80%93Winkler_distance" rel="nofollow">Winkler</a> diminishes the distance of strings with common prefixes.  The Winkler adjustment was originally defined for the Jaro similarity score but this package defines it for any string distance.</li>
<li><a href="http://chairnerd.seatgeek.com/fuzzywuzzy-fuzzy-string-matching-in-python/" rel="nofollow">Partial</a> returns the minimum distance between the shorter string and substrings of the longer string.</li>
<li><a href="http://chairnerd.seatgeek.com/fuzzywuzzy-fuzzy-string-matching-in-python/" rel="nofollow">TokenSort</a> adjusts for differences in word orders by reording words alphabetically.</li>
<li><a href="http://chairnerd.seatgeek.com/fuzzywuzzy-fuzzy-string-matching-in-python/" rel="nofollow">TokenSet</a> adjusts for differences in word orders and word numbers by comparing the intersection of two strings with each string.</li>
<li><a href="http://chairnerd.seatgeek.com/fuzzywuzzy-fuzzy-string-matching-in-python/" rel="nofollow">TokenMax</a> combines scores using the base distance, the <code>Partial</code>, <code>TokenSort</code> and <code>TokenSet</code> modifiers, with penalty terms depending on string lengths.</li>
</ul>
</li>
</ul>
<p>Some examples:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">evaluate</span>(<span class="pl-c1">Jaro</span>(), <span class="pl-s"><span class="pl-pds">"</span>martha<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>marhta<span class="pl-pds">"</span></span>)
<span class="pl-c1">evaluate</span>(<span class="pl-c1">Winkler</span>(<span class="pl-c1">Jaro</span>()), <span class="pl-s"><span class="pl-pds">"</span>martha<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>marhta<span class="pl-pds">"</span></span>)
<span class="pl-c1">evaluate</span>(<span class="pl-c1">QGram</span>(<span class="pl-c1">2</span>), <span class="pl-s"><span class="pl-pds">"</span>martha<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>marhta<span class="pl-pds">"</span></span>)
<span class="pl-c1">evaluate</span>(<span class="pl-c1">Winkler</span>(<span class="pl-c1">QGram</span>(<span class="pl-c1">2</span>)), <span class="pl-s"><span class="pl-pds">"</span>martha<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>marhta<span class="pl-pds">"</span></span>)
<span class="pl-c1">evaluate</span>(<span class="pl-c1">Levenshtein</span>(), <span class="pl-s"><span class="pl-pds">"</span>martha<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>marhta<span class="pl-pds">"</span></span>)
<span class="pl-c1">evaluate</span>(<span class="pl-c1">Partial</span>(<span class="pl-c1">Levenshtein</span>()), <span class="pl-s"><span class="pl-pds">"</span>martha<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>marhta<span class="pl-pds">"</span></span>)
<span class="pl-c1">evaluate</span>(<span class="pl-c1">Jaro</span>(), <span class="pl-s"><span class="pl-pds">"</span>martha<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>marhta<span class="pl-pds">"</span></span>)
<span class="pl-c1">evaluate</span>(<span class="pl-c1">TokenSet</span>(<span class="pl-c1">Jaro</span>()), <span class="pl-s"><span class="pl-pds">"</span>martha<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>marhta<span class="pl-pds">"</span></span>)
<span class="pl-c1">evaluate</span>(<span class="pl-c1">TokenMax</span>(<span class="pl-c1">RatcliffObershelp</span>()), <span class="pl-s"><span class="pl-pds">"</span>martha<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>marhta<span class="pl-pds">"</span></span>)</pre></div>
<p>Alternatively, each distance can be used as a callable to call the evaluate function of each metric or modified metric, for example:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">Jaro</span>()(<span class="pl-s"><span class="pl-pds">"</span>martha<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>marhta<span class="pl-pds">"</span></span>)
<span class="pl-c1">Winkler</span>(<span class="pl-c1">Jaro</span>())(<span class="pl-s"><span class="pl-pds">"</span>martha<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>marhta<span class="pl-pds">"</span></span>)
<span class="pl-c1">QGram</span>(<span class="pl-c1">2</span>)(<span class="pl-s"><span class="pl-pds">"</span>martha<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>marhta<span class="pl-pds">"</span></span>)</pre></div>
<p>A good distance to match strings composed of multiple words (like addresses) is <code>TokenMax(Levenshtein())</code> (see <a href="http://chairnerd.seatgeek.com/fuzzywuzzy-fuzzy-string-matching-in-python/" rel="nofollow">fuzzywuzzy</a>).</p>
<h2><a id="user-content-compare" class="anchor" aria-hidden="true" href="#compare"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Compare</h2>
<p>The function <code>compare</code> is defined as 1 minus the normalized distance between two strings. It always returns a number between 0 and 1: a value of 0 means completely different and a value of 1 means completely similar.</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">evaluate</span>(<span class="pl-c1">Levenshtein</span>(), <span class="pl-s"><span class="pl-pds">"</span>New York<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>New York<span class="pl-pds">"</span></span>)
<span class="pl-c"><span class="pl-c">#</span>&gt; 0</span>
<span class="pl-c1">compare</span>(<span class="pl-s"><span class="pl-pds">"</span>New York<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>New York<span class="pl-pds">"</span></span>, <span class="pl-c1">Levenshtein</span>())
<span class="pl-c"><span class="pl-c">#</span>&gt; 1.0</span>
</pre></div>
<h2><a id="user-content-find" class="anchor" aria-hidden="true" href="#find"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Find</h2>
<ul>
<li>
<p><code>findmax</code> returns the value and index of the element in <code>itr</code> with the highest similarity score with <code>s</code>. Its syntax is:</p>
<div class="highlight highlight-source-julia"><pre> <span class="pl-c1">findmax</span>(s, itr, dist<span class="pl-k">::</span><span class="pl-c1">StringDistance</span>; min_score <span class="pl-k">=</span> <span class="pl-c1">0.0</span>)</pre></div>
</li>
<li>
<p><code>findall</code> returns the indices of all elements in <code>itr</code> with a similarity score with <code>s</code> higher than a minimum value (default to 0.8). Its syntax is:</p>
<div class="highlight highlight-source-julia"><pre> <span class="pl-c1">findall</span>(s, itr, dist<span class="pl-k">::</span><span class="pl-c1">StringDistance</span>; min_score <span class="pl-k">=</span> <span class="pl-c1">0.8</span>)</pre></div>
</li>
</ul>
<p>The functions <code>findmax</code> and <code>findall</code> are particularly optimized for <code>Levenshtein</code> and <code>DamerauLevenshtein</code> distances (as well as their modifications via <code>Partial</code>, <code>TokenSort</code>, <code>TokenSet</code>, or <code>TokenMax</code>).</p>
<h2><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>References</h2>
<ul>
<li><a href="https://journal.r-project.org/archive/2014-1/loo.pdf" rel="nofollow">The stringdist Package for Approximate String Matching</a> Mark P.J. van der Loo</li>
<li><a href="http://chairnerd.seatgeek.com/fuzzywuzzy-fuzzy-string-matching-in-python/" rel="nofollow">fuzzywuzzy</a></li>
</ul>
</article></div>