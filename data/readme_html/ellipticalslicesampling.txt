<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content p-5" itemprop="text"><h1><a id="user-content-ellipticalslicesamplingjl" class="anchor" aria-hidden="true" href="#ellipticalslicesamplingjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>EllipticalSliceSampling.jl</h1>
<p>Julia implementation of elliptical slice sampling.</p>
<p><a href="https://www.repostatus.org/#wip" rel="nofollow"><img src="https://camo.githubusercontent.com/fab25c6424d2b4ea02669e7a51a2d5abc4d1ab7f/68747470733a2f2f7777772e7265706f7374617475732e6f72672f6261646765732f6c61746573742f7769702e737667" alt="Project Status: WIP â€“ Initial development is in progress, but there has not yet been a stable, usable release suitable for the public." data-canonical-src="https://www.repostatus.org/badges/latest/wip.svg" style="max-width:100%;"></a>
<a href="https://travis-ci.com/devmotion/EllipticalSliceSampling.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/b45806380aa21c7b9fcd8acf3043e50a938522b0/68747470733a2f2f7472617669732d63692e636f6d2f6465766d6f74696f6e2f456c6c6970746963616c536c69636553616d706c696e672e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.com/devmotion/EllipticalSliceSampling.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://ci.appveyor.com/project/devmotion/EllipticalSliceSampling-jl" rel="nofollow"><img src="https://camo.githubusercontent.com/c9e25dfc8c000d2233f2ccc22401b457398a7521/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f6465766d6f74696f6e2f456c6c6970746963616c536c69636553616d706c696e672e6a6c3f7376673d74727565" alt="Build Status" data-canonical-src="https://ci.appveyor.com/api/projects/status/github/devmotion/EllipticalSliceSampling.jl?svg=true" style="max-width:100%;"></a>
<a href="https://codecov.io/gh/devmotion/EllipticalSliceSampling.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/ca0bc796006c04f092aebe3178c33ccfea31db17/68747470733a2f2f636f6465636f762e696f2f67682f6465766d6f74696f6e2f456c6c6970746963616c536c69636553616d706c696e672e6a6c2f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="Codecov" data-canonical-src="https://codecov.io/gh/devmotion/EllipticalSliceSampling.jl/branch/master/graph/badge.svg" style="max-width:100%;"></a>
<a href="https://coveralls.io/github/devmotion/EllipticalSliceSampling.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/9c27f9abaad57f55e6876a6dfbcb2e1ba2a79ada/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6465766d6f74696f6e2f456c6c6970746963616c536c69636553616d706c696e672e6a6c2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coveralls" data-canonical-src="https://coveralls.io/repos/github/devmotion/EllipticalSliceSampling.jl/badge.svg?branch=master" style="max-width:100%;"></a></p>
<h2><a id="user-content-overview" class="anchor" aria-hidden="true" href="#overview"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Overview</h2>
<p>This package implements elliptical slice sampling in the Julia language, as described in
<a href="http://proceedings.mlr.press/v9/murray10a/murray10a.pdf" rel="nofollow">Murray, Adams &amp; MacKay (2010)</a>.</p>
<p>Elliptical slice sampling is a "Markov chain Monte Carlo algorithm for performing
inference in models with multivariate Gaussian priors" (Murray, Adams &amp; MacKay (2010)).</p>
<p>Without loss of generality, the originally described algorithm assumes that the Gaussian
prior has zero mean. For convenience we allow the user to specify arbitrary Gaussian
priors with non-zero means and handle the change of variables internally.</p>
<h2><a id="user-content-usage" class="anchor" aria-hidden="true" href="#usage"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Usage</h2>
<p>Probably most users would like to use the exported function</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">ESS_mcmc</span>([rng<span class="pl-k">::</span><span class="pl-c1">AbstracRNG</span>, ]prior, loglikelihood, N<span class="pl-k">::</span><span class="pl-c1">Int</span>[; burnin<span class="pl-k">::</span><span class="pl-c1">Int</span> <span class="pl-k">=</span> <span class="pl-c1">0</span>])</pre></div>
<p>which returns a vector of <code>N</code> samples for approximating the posterior of
a model with a Gaussian prior that allows sampling from the <code>prior</code> and
evaluation of the log likelihood <code>loglikelihood</code>. The burn-in phase with
<code>burnin</code> samples is discarded.</p>
<p>If you want to have more control about the sampling procedure (e.g., if you
only want to save a subset of samples or want to use another stopping
criterion), the function</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c1">ESS_mcmc_sampler</span>([rng<span class="pl-k">::</span><span class="pl-c1">AbstractRNG</span>, ]prior, loglikelihood)</pre></div>
<p>gives you access to an iterator from which you can generate an unlimited
number of samples.</p>
<h3><a id="user-content-prior" class="anchor" aria-hidden="true" href="#prior"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Prior</h3>
<p>You may specify Gaussian priors with arbitrary means. EllipticalSliceSampling.jl
provides first-class support for the scalar and multivariate normal distributions
in <a href="https://github.com/JuliaStats/Distributions.jl">Distributions.jl</a>. For
instance, if the prior distribution is a standard normal distribution, you can
choose</p>
<div class="highlight highlight-source-julia"><pre>prior <span class="pl-k">=</span> <span class="pl-c1">Normal</span>()</pre></div>
<p>However, custom Gaussian priors are supported as well. For instance, if you want to
use a custom distribution type <code>GaussianPrior</code>, the following methods should be
implemented:</p>
<div class="highlight highlight-source-julia"><pre><span class="pl-c"><span class="pl-c">#</span> state that the distribution is actually Gaussian</span>
EllipticalSliceSampling<span class="pl-k">.</span><span class="pl-en">isnormal</span>(<span class="pl-k">::</span><span class="pl-c1">Type{&lt;:GaussianPrior}</span>) <span class="pl-k">=</span> <span class="pl-c1">true</span>

<span class="pl-c"><span class="pl-c">#</span> define the mean of the distribution</span>
Statistics<span class="pl-k">.</span><span class="pl-en">mean</span>(dist<span class="pl-k">::</span><span class="pl-c1">GaussianPrior</span>) <span class="pl-k">=</span> <span class="pl-k">...</span>

<span class="pl-c"><span class="pl-c">#</span> define how to sample from the distribution</span>
<span class="pl-c"><span class="pl-c">#</span> only one of the following methods is needed:</span>
<span class="pl-c"><span class="pl-c">#</span> - if the samples are immutable (e.g., numbers or static arrays) only</span>
<span class="pl-c"><span class="pl-c">#</span>   `rand(rng, dist)` should be implemented</span>
<span class="pl-c"><span class="pl-c">#</span> - otherwise only `rand!(rng, dist, sample)` is required</span>
Base<span class="pl-k">.</span><span class="pl-en">rand</span>(rng<span class="pl-k">::</span><span class="pl-c1">AbstractRNG</span>, dist<span class="pl-k">::</span><span class="pl-c1">GaussianPrior</span>) <span class="pl-k">=</span> <span class="pl-k">...</span>
Random<span class="pl-k">.</span><span class="pl-en">rand!</span>(rng<span class="pl-k">::</span><span class="pl-c1">AbstractRNG</span>, dist<span class="pl-k">::</span><span class="pl-c1">GaussianPrior</span>, sample) <span class="pl-k">=</span> <span class="pl-k">...</span>

<span class="pl-c"><span class="pl-c">#</span> specify the type of a sample from the distribution</span>
Base<span class="pl-k">.</span><span class="pl-en">eltype</span>(<span class="pl-k">::</span><span class="pl-c1">Type{&lt;:GaussianPrior}</span>) <span class="pl-k">=</span> <span class="pl-k">...</span>

<span class="pl-c"><span class="pl-c">#</span> in the case of mutable samples, specify the array size of the samples</span>
Base<span class="pl-k">.</span><span class="pl-en">size</span>(dist<span class="pl-k">::</span><span class="pl-c1">GaussianPrior</span>) <span class="pl-k">=</span> <span class="pl-k">...</span></pre></div>
<h3><a id="user-content-log-likelihood" class="anchor" aria-hidden="true" href="#log-likelihood"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Log likelihood</h3>
<p>In addition to the prior, you have to specify a Julia implementation of
the log likelihood function. Here the predefined log densities and log
likelihood functions in
<a href="https://github.com/JuliaStats/Distributions.jl">Distributions.jl</a> might
be useful.</p>
<h3><a id="user-content-progress-monitor" class="anchor" aria-hidden="true" href="#progress-monitor"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Progress monitor</h3>
<p>If you use a package such as <a href="https://junolab.org/" rel="nofollow">Juno</a> or
<a href="https://github.com/tkf/ConsoleProgressMonitor.jl">ConsoleProgressMonitor.jl</a> that supports
progress logs created by the
<a href="https://github.com/JunoLab/ProgressLogging.jl">ProgressLogging.jl</a> API, then you can
monitor the progress of the sampling algorithm.</p>
<h2><a id="user-content-bibliography" class="anchor" aria-hidden="true" href="#bibliography"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Bibliography</h2>
<p>Murray, I., Adams, R. &amp; MacKay, D.. (2010). Elliptical slice sampling. Proceedings of Machine Learning Research, 9:541-548.</p>
</article></div>