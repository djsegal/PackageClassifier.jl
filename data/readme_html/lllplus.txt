<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content p-5" itemprop="text"><h1><a id="user-content-lllplusjl" class="anchor" aria-hidden="true" href="#lllplusjl"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>LLLplus.jl</h1>
<p><a href="https://travis-ci.org/christianpeel/LLLplus.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/7ecb0e2cd9a1b82f8b65ef11a0b1efca68326fc0/68747470733a2f2f7472617669732d63692e6f72672f63687269737469616e7065656c2f4c4c4c706c75732e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/christianpeel/LLLplus.jl.svg?branch=master" style="max-width:100%;"></a>
<a href="https://pkg.julialang.org/docs/LLLplus/" rel="nofollow"><img src="https://camo.githubusercontent.com/d1f3123a6b0a61d9a3cbc458796c9131643f98f7/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d646576656c2d626c75652e737667" alt="" data-canonical-src="https://img.shields.io/badge/docs-devel-blue.svg" style="max-width:100%;"></a></p>
<p>LLLplus includes
<a href="https://en.wikipedia.org/wiki/Lenstra%E2%80%93Lenstra%E2%80%93Lov%C3%A1sz_lattice_basis_reduction_algorithm" rel="nofollow">Lenstra-Lenstra-Lov√°sz</a>
(LLL), <a href="https://en.wikipedia.org/wiki/Viggo_Brun" rel="nofollow">Brun</a>, and Seysen lattice reduction; VBLAST matrix
decomposition; and a
<a href="https://en.wikipedia.org/wiki/Lattice_problem#Closest_vector_problem_.28CVP.29" rel="nofollow">closest vector problem</a>
(CVP) solver. These lattice reduction and related lattice tools are
used in cryptography, digital communication, and integer programming.
The historical and practical prominence of the LLL technique in
lattice tools is the reason for its use in the name "LLLplus".
This package is experimental; see
<a href="https://github.com/fplll/fplll">fplll</a> for a robust tool.</p>
<p>LLL [1] lattice reduction is a powerful tool that is widely used in
cryptanalysis, in cryptographic system design, in digital
communications, and to solve other integer problems.  LLL reduction is
often used as an approximate solution to the
<a href="https://en.wikipedia.org/wiki/Lattice_problem#Shortest_vector_problem_.28SVP.29" rel="nofollow">shortest vector problem</a>
(SVP).  We also include Gauss/Lagrange, Brun [2] and Seysen [3]
lattice reduction techniques. The LLL, Brun, and Seysen algorithms are
based on [4]. The CVP solver is based on [5] and can handle lattices
and bounded integer constellations.</p>
<p>We also include code to do a
<a href="https://en.wikipedia.org/wiki/Bell_Laboratories_Layered_Space-Time" rel="nofollow">Vertical-Bell Laboratories Layered Space-Time</a>
(V-BLAST) [6] matrix decomposition which is used in digital
communications. The LLL, Brun, Seysen, V-BLAST, and CVP functions are
used to solve (exactly or approximately) CVP problems; the
<a href="https://github.com/christianpeel/MUMIMO.jl">MUMIMO.jl</a> package
demostrates how these functions can be used in encoding and decoding
multi-antenna signals.</p>
<p>Another important application is in cryptanalysis; as an example of a
cryptanalytic attack, see the <code>subsetsum</code> function.  Another important
application is in integer programming, where the LLL algorithm has
been shown to solve the integer programming feasibility problem; see
<code>integerfeasibility</code>. Lattice tools are often used to study and solve
Diophantine problems; for example in  "simultaneous diophantine
approximation" a vector of real numbers are approximated by rationals
with a common deonminator. For a demo function, see <code>rationalapprox</code>.</p>
<h3><a id="user-content-examples" class="anchor" aria-hidden="true" href="#examples"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Examples</h3>
<p>Each function contains documentation and examples available via Julia's
built-in documentation system, for example with <code>?lll</code>. Documentation
of all the functions are available on
<a href="https://pkg.julialang.org/docs/LLLplus/" rel="nofollow">pkg.julialang.org</a>. A tutorial notebook is
found in the <a href="docs/LLLplusTutorial.ipynb"><code>docs</code></a> directory or on
<a href="https://nbviewer.jupyter.org/github/christianpeel/LLLplus.jl/blob/master/docs/LLLplusTutorial.ipynb" rel="nofollow">nbviewer</a>.</p>
<p>Here are a few examples of using the functions in the
package on random lattices.</p>
<div class="highlight highlight-source-julia"><pre>Pkg<span class="pl-k">.</span><span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>LLLplus<span class="pl-pds">"</span></span>)
<span class="pl-k">using</span> LLLplus
<span class="pl-c"><span class="pl-c">#</span> repeat the commands below to remove JIT compile time</span>

<span class="pl-c"><span class="pl-c">#</span> Time the decomposition of a matrix with randn entries</span>
N <span class="pl-k">=</span> <span class="pl-c1">100</span>;
H <span class="pl-k">=</span> <span class="pl-c1">randn</span>(N,N);
<span class="pl-c1">@time</span> B,T <span class="pl-k">=</span> <span class="pl-c1">sizereduction</span>(H);
<span class="pl-c1">@time</span> B,T <span class="pl-k">=</span> <span class="pl-c1">brun</span>(H);
<span class="pl-c1">@time</span> B,T <span class="pl-k">=</span> <span class="pl-c1">lll</span>(H);
<span class="pl-c1">@time</span> B,T <span class="pl-k">=</span> <span class="pl-c1">seysen</span>(H);
<span class="pl-c1">@time</span> W,P,B <span class="pl-k">=</span> <span class="pl-c1">vblast</span>(H);

<span class="pl-c"><span class="pl-c">#</span> check out the CVP solver</span>
<span class="pl-c1">@time</span> Q,R<span class="pl-k">=</span><span class="pl-c1">qr</span>(H);
u<span class="pl-k">=</span><span class="pl-c1">Int</span>.(<span class="pl-c1">rand</span>(<span class="pl-c1">0</span><span class="pl-k">:</span><span class="pl-c1">1e10</span>,N));
y<span class="pl-k">=</span>H<span class="pl-k">*</span>u<span class="pl-k">+</span><span class="pl-c1">rand</span>(N)<span class="pl-k">/</span><span class="pl-c1">100</span>;
<span class="pl-c1">@time</span> uhat<span class="pl-k">=</span><span class="pl-c1">cvp</span>(Q<span class="pl-k">'</span><span class="pl-k">*</span>y,R);
<span class="pl-c1">sum</span>(<span class="pl-c1">abs</span>.(u<span class="pl-k">-</span>uhat))</pre></div>
<h3><a id="user-content-execution-time-results" class="anchor" aria-hidden="true" href="#execution-time-results"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Execution Time results</h3>
<p>The following performance results are obtained from the
following command in the top-level LLLplus directory:
<code>julia -e 'include("benchmark/perftest.jl")'</code>
In the tests we time execution of the lattice-reduction functions,
average the results over multiple random matrices, and show results as
a function of the size of the matrix and of the data type.</p>
<p>We first show how the time varies with matrix size (1,2,4,...256); the
vertical axis shows execution time on a logarithmic scale; the x-axis
is also logarithmic. The generally linear nature of the LLL curve supports
the polynomial-time nature of the algorithm. Each data point
is the average of execution time of 40 runs of a lattice-reduction
technique, where the matrices used were generated using 'randn' to
emulate unit-variance Gaussian-distributed values.</p>
<p><a target="_blank" rel="noopener noreferrer" href="docs/src/assets/perfVsNfloat64.png"><img src="docs/src/assets/perfVsNfloat64.png" alt="Time vs matrix size" style="max-width:100%;"></a></p>
<p>All the modules can handle a variety of data types. In the next figure
we show execution time for several built-in datatypes (Int32, Int64,
Int128, Float32, Float64, BitInt, and BigFloat) as well as type from
external packages (Float128 from Quadmath.jl and Double64 from
DoubleFloat.jl) which are used to generate 40 128x128 matrices, over
which execution time for the lattice reduction techniques is averaged.
The vertical axis is a logarithmic representation of execution time as
in the previous figure.</p>
<p><a target="_blank" rel="noopener noreferrer" href="docs/src/assets/perfVsDataType.png"><img src="docs/src/assets/perfVsDataType.png" alt="Time vs data type" style="max-width:100%;"></a></p>
<h3><a id="user-content-notes" class="anchor" aria-hidden="true" href="#notes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Notes</h3>
<p>There are certainly many improvements and additions that could be made
to LLLplus, such as adding Block-Korkin-Zolotarev lattice reduction
with improvements as in [8]. Even so, it would be hard to compete with
<a href="https://github.com/fplll/fplll">fplll</a> on features. In fact, a Julia
wrapper around the <a href="https://github.com/fplll/fplll">fplll</a> or
<a href="http://www.shoup.net/ntl/" rel="nofollow">Number Theory Library</a> would be the most
useful addition to lattice tools in Julia. These respected tools could
be used directly and would provide funcionality not in LLLplus.</p>
<p>The algorithm pseudocode in the monograph [7] and the survey paper [4]
were very helpful in writing the lattice reduction tools in LLLplus
and are a good resource for further study. If you are trying to break
one of the <a href="http://www.latticechallenge.org" rel="nofollow">Lattice Challenge</a>
records or are looking for robust, well-proven lattice tools, look at
<a href="https://github.com/fplll/fplll">fplll</a>. Also, for many
number-theoretic problems the
<a href="https://github.com/Nemocas/Nemo.jl">Nemo.jl</a> package is appropriate;
it uses the <a href="http://flintlib.org/" rel="nofollow">FLINT</a> C library to do LLL
reduction on Nemo-specific data types.  Finally, no number theorists
have worked on LLLplus; please treat the package as experimental.</p>
<h3><a id="user-content-references" class="anchor" aria-hidden="true" href="#references"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>References</h3>
<p>[1] A. K. Lenstra; H. W. Lenstra Jr.; L. Lov√°sz, <a href="http://ftp.cs.elte.hu/~lovasz/scans/lll.pdf" rel="nofollow">"Factoring polynomials with rational coefficients"</a>. Mathematische Annalen 261, 1982.</p>
<p>[2] V. Brun,
<a href="https://archive.org/stream/skrifterutgitavv201chri#page/300/mode/2up" rel="nofollow">"En generalisation av kjedebr√∏ken I,"</a>
Skr. Vidensk. Selsk. Kristiana, Mat. Nat. Klasse, 1919.</p>
<p>[3] M. Seysen, <a href="http://link.springer.com/article/10.1007%2FBF01202355" rel="nofollow">"Simultaneous reduction of a lattice basis and its reciprocal basis"</a> Combinatorica, 1993.</p>
<p>[4] D. Wuebben, D. Seethaler, J. Jalden, and G. Matz, <a href="http://www.ant.uni-bremen.de/sixcms/media.php/102/10740/SPM_2011_Wuebben.pdf" rel="nofollow">"Lattice Reduction - A Survey with Applications in Wireless Communications"</a>. IEEE Signal Processing Magazine, 2011.</p>
<p>[5] A. Ghasemmehdi, E. Agrell, <a href="https://publications.lib.chalmers.se/records/fulltext/local_141586.pdf" rel="nofollow">"Faster Recursions in Sphere Decoding"</a> IEEE
Transactions on Information Theory, vol 57, issue 6 , June 2011.</p>
<p>[6] P. W. Wolniansky, G. J. Foschini, G. D. Golden, R. A. Valenzuela, <a href="http://ieeexplore.ieee.org/xpl/login.jsp?tp=&amp;arnumber=738086" rel="nofollow">"V-BLAST: An Architecture for Realizing Very High Data Rates Over the Rich-Scattering Wireless Channel"</a>. Proc. URSI
ISSSE: 295‚Äì300, 1998.</p>
<p>[7] M. R. Bremner, <a href="https://www.amazon.com/Lattice-Basis-Reduction-Introduction-Applications/dp/1439807027" rel="nofollow">"Lattice Basis Reduction: An Introduction to the LLL
Algorithm and Its Applications"</a> CRC Press, 2012.</p>
<p>[8] Y. Chen, P. Q. Nguyen, <a href="http://www.iacr.org/archive/asiacrypt2011/70730001/70730001.pdf" rel="nofollow">"BKZ 2.0: Better Lattice Security Estimates"</a>. Proc. ASIACRYPT 2011.</p>
</article></div>