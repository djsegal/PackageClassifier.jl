<div id="readme" class="md" data-path="README.md"><article class="markdown-body entry-content p-5" itemprop="text"><h1><a id="user-content-latexprint" class="anchor" aria-hidden="true" href="#latexprint"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>LatexPrint</h1>
<p><a href="https://travis-ci.org/scheinerman/LatexPrint.jl" rel="nofollow"><img src="https://camo.githubusercontent.com/9b6b2d9616c9da1a40a4713f837e165d96dfaf4e/68747470733a2f2f7472617669732d63692e6f72672f73636865696e65726d616e2f4c617465785072696e742e6a6c2e7376673f6272616e63683d6d6173746572" alt="Build Status" data-canonical-src="https://travis-ci.org/scheinerman/LatexPrint.jl.svg?branch=master" style="max-width:100%;"></a></p>
<p><a href="http://codecov.io/github/scheinerman/LatexPrint.jl?branch=master" rel="nofollow"><img src="https://camo.githubusercontent.com/ce9292b88a0d332a28eb6931c608b2f2e78088a3/687474703a2f2f636f6465636f762e696f2f6769746875622f73636865696e65726d616e2f4c617465785072696e742e6a6c2f636f7665726167652e7376673f6272616e63683d6d6173746572" alt="codecov.io" data-canonical-src="http://codecov.io/github/scheinerman/LatexPrint.jl/coverage.svg?branch=master" style="max-width:100%;"></a></p>
<p>Print Julia objects in LaTeX form.</p>
<h2><a id="user-content-key-functions" class="anchor" aria-hidden="true" href="#key-functions"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Key functions</h2>
<p>This module provides functions for converting Julia objects into
string representations for use in LaTeX mathematics mode. The primary
function is <code>laprintln</code> which behaves precisely like <code>println</code> except
Julia objects are first converted to a form suitable for
LaTeX. Because <code>laprintln</code> is a lot to type, we also provide the
abbreviation <code>lap</code>.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">using</span> LatexPrint

julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> <span class="pl-c1">2</span><span class="pl-k">//</span><span class="pl-c1">6</span>
<span class="pl-c1">1</span><span class="pl-k">//</span><span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">lap</span>(x)
<span class="pl-k">\</span>frac{<span class="pl-c1">1</span>}{<span class="pl-c1">3</span>}</pre></div>
<p>We also provide the function <code>laprint</code> which does not append a new
line (just like <code>print</code>).</p>
<p>These functions rely on <code>latex_form</code> which converts a Julia object
into an <code>String</code> representation in its LaTeX form:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">latex_form</span>(x)
<span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\\</span>frac{1}{3}<span class="pl-pds">"</span></span></pre></div>
<p>The double backslash in the output of <code>latex_form</code> is converted to a
single backslash when run through a <code>print</code> function.</p>
<h2><a id="user-content-supported-types" class="anchor" aria-hidden="true" href="#supported-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Supported Types</h2>
<h3><a id="user-content-numbers" class="anchor" aria-hidden="true" href="#numbers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Numbers</h3>
<h4><a id="user-content-integers-and-floating-point-numbers" class="anchor" aria-hidden="true" href="#integers-and-floating-point-numbers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Integers and floating point numbers</h4>
<p><code>FloatingPoint</code> and <code>Integer</code> numbers are printed unchanged.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">lap</span>(<span class="pl-c1">sqrt</span>(<span class="pl-c1">2</span>))
<span class="pl-c1">1.4142135623730951</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">lap</span>(<span class="pl-c1">23</span>)
<span class="pl-c1">23</span></pre></div>
<p>However, infinite and invalid values are printed as follows:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">lap</span>(<span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">0</span>)
<span class="pl-k">\</span>infty

julia<span class="pl-k">&gt;</span> <span class="pl-c1">lap</span>(<span class="pl-k">-</span><span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">0</span>)
<span class="pl-k">-\</span>infty

julia<span class="pl-k">&gt;</span> <span class="pl-c1">lap</span>(<span class="pl-c1">0</span><span class="pl-k">/</span><span class="pl-c1">0</span>)
<span class="pl-k">\</span>text{<span class="pl-c1">NaN</span>}</pre></div>
<p>Julia's <code>MathConst</code> numbers are printed using their expected LaTeX
form:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">lap</span>(pi)
<span class="pl-k">\</span>pi</pre></div>
<h4><a id="user-content-rational-numbers" class="anchor" aria-hidden="true" href="#rational-numbers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Rational numbers</h4>
<p>Rational numbers are printed as fractions (unless the denominator
happens to be 1, in which case we print as an integer).</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">lap</span>(<span class="pl-c1">10</span><span class="pl-k">//</span><span class="pl-c1">4</span>)
<span class="pl-k">\</span>frac{<span class="pl-c1">5</span>}{<span class="pl-c1">2</span>}

julia<span class="pl-k">&gt;</span> <span class="pl-c1">lap</span>(<span class="pl-c1">10</span><span class="pl-k">//</span><span class="pl-c1">2</span>)
<span class="pl-c1">5</span></pre></div>
<h4><a id="user-content-complex-numbers" class="anchor" aria-hidden="true" href="#complex-numbers"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Complex numbers</h4>
<p>Complex numbers always include a real and an imaginary part, even if
either part equals zero:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> z <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">+</span>im
<span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">1im</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">lap</span>(z)
<span class="pl-c1">1</span><span class="pl-k">+</span><span class="pl-c1">1</span>i

julia<span class="pl-k">&gt;</span> <span class="pl-c1">lap</span>(z<span class="pl-k">*</span>z)
<span class="pl-c1">0</span><span class="pl-k">+</span><span class="pl-c1">2</span>i

julia<span class="pl-k">&gt;</span> <span class="pl-c1">lap</span>(im<span class="pl-k">^</span>im)
<span class="pl-c1">0.20787957635076193</span><span class="pl-k">+</span><span class="pl-c1">0.0</span>i</pre></div>
<h3><a id="user-content-boolean-values" class="anchor" aria-hidden="true" href="#boolean-values"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Boolean values</h3>
<p>The <code>Bool</code> values <code>true</code> and <code>false</code> output like this:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">lap</span>(<span class="pl-c1">true</span>)
<span class="pl-k">\</span>mathrm{T}

julia<span class="pl-k">&gt;</span> <span class="pl-c1">lap</span>(<span class="pl-c1">false</span>)
<span class="pl-k">\</span>mathrm{F}</pre></div>
<h3><a id="user-content-nothing" class="anchor" aria-hidden="true" href="#nothing"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><code>nothing</code></h3>
<p>A <code>nothing</code> value is rendered as <code>\mathrm{nothing}</code>.</p>
<h3><a id="user-content-text" class="anchor" aria-hidden="true" href="#text"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Text</h3>
<p>The LaTeX version of an <code>String</code> is wrapped in the command
<code>\text</code> (which requires the <code>amsmath</code> package in LaTeX). The rationale
is that we always want to able to paste the output of <code>lap</code> directly
into mathematics mode in LaTeX.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">lap</span>(<span class="pl-s"><span class="pl-pds">"</span>Hello, world!<span class="pl-pds">"</span></span>)
<span class="pl-k">\</span>text{Hello, world!}</pre></div>
<h3><a id="user-content-arrays" class="anchor" aria-hidden="true" href="#arrays"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Arrays</h3>
<p>Vectors (one-dimensional arrays) and matrices (two-dimensional arrays)
are converted into LaTeX <code>array</code> environments bounded by square
brackets with centering alignment. (These default options can be
changed; see "Customizing existing types" later in this document.)</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> [<span class="pl-c1">1</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3</span>]
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Int64,<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>
 <span class="pl-c1">2</span>
 <span class="pl-c1">3</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">lap</span>(x)
<span class="pl-k">\</span>left[
<span class="pl-k">\</span><span class="pl-k">begin</span>{array}{c}
<span class="pl-c1">1</span> <span class="pl-k">\\</span>
<span class="pl-c1">2</span> <span class="pl-k">\\</span>
<span class="pl-c1">3</span> <span class="pl-k">\\</span>
<span class="pl-k">\</span><span class="pl-c1">end</span>{array}
<span class="pl-k">\</span>right]

julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">eye</span>(<span class="pl-c1">3</span>)
<span class="pl-c1">3</span>x3 Array{Float64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">1.0</span>  <span class="pl-c1">0.0</span>
 <span class="pl-c1">0.0</span>  <span class="pl-c1">0.0</span>  <span class="pl-c1">1.0</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">lap</span>(A)
<span class="pl-k">\</span>left[
<span class="pl-k">\</span><span class="pl-k">begin</span>{array}{ccc}
<span class="pl-c1">1.0</span> <span class="pl-k">&amp;</span> <span class="pl-c1">0.0</span> <span class="pl-k">&amp;</span> <span class="pl-c1">0.0</span> <span class="pl-k">\\</span>
<span class="pl-c1">0.0</span> <span class="pl-k">&amp;</span> <span class="pl-c1">1.0</span> <span class="pl-k">&amp;</span> <span class="pl-c1">0.0</span> <span class="pl-k">\\</span>
<span class="pl-c1">0.0</span> <span class="pl-k">&amp;</span> <span class="pl-c1">0.0</span> <span class="pl-k">&amp;</span> <span class="pl-c1">1.0</span> <span class="pl-k">\\</span>
<span class="pl-k">\</span><span class="pl-c1">end</span>{array}
<span class="pl-k">\</span>right]</pre></div>
<p>Vectors are, by default, rendered as a column. To typeset a vector as
a row, simply take its transpose:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> x <span class="pl-k">=</span> [<span class="pl-c1">2</span><span class="pl-k">//</span><span class="pl-c1">3</span>, <span class="pl-c1">4</span><span class="pl-k">//</span><span class="pl-c1">3</span>, <span class="pl-c1">6</span><span class="pl-k">//</span><span class="pl-c1">3</span>]
<span class="pl-c1">3</span><span class="pl-k">-</span>element Array{Rational{Int64},<span class="pl-c1">1</span>}<span class="pl-k">:</span>
 <span class="pl-c1">2</span><span class="pl-k">//</span><span class="pl-c1">3</span>
 <span class="pl-c1">4</span><span class="pl-k">//</span><span class="pl-c1">3</span>
 <span class="pl-c1">2</span><span class="pl-k">//</span><span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">lap</span>(x<span class="pl-k">'</span>)
<span class="pl-k">\</span>left[
<span class="pl-k">\</span><span class="pl-k">begin</span>{array}{ccc}
<span class="pl-k">\</span>frac{<span class="pl-c1">2</span>}{<span class="pl-c1">3</span>} <span class="pl-k">&amp;</span> <span class="pl-k">\</span>frac{<span class="pl-c1">4</span>}{<span class="pl-c1">3</span>} <span class="pl-k">&amp;</span> <span class="pl-c1">2</span> <span class="pl-k">\\</span>
<span class="pl-k">\</span><span class="pl-c1">end</span>{array}
<span class="pl-k">\</span>right]</pre></div>
<h3><a id="user-content-sets" class="anchor" aria-hidden="true" href="#sets"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Sets</h3>
<p>Julia <code>Set</code> and <code>IntSet</code> objects are rendered as a comma separated
list between curly braces. The elements are sorted into ascending
order (if possible). An empty set is returned as <code>\emptyset</code> (unless
another form is specified using <code>set_empty</code>).</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">Set</span>({<span class="pl-c1">3.5</span>, <span class="pl-c1">2</span>, <span class="pl-k">-</span><span class="pl-c1">5</span>})
<span class="pl-c1">Set</span><span class="pl-c1">{Any}</span>({<span class="pl-c1">2</span>,<span class="pl-k">-</span><span class="pl-c1">5</span>,<span class="pl-c1">3.5</span>})

julia<span class="pl-k">&gt;</span> <span class="pl-c1">lap</span>(A)
<span class="pl-k">\</span>left<span class="pl-k">\</span>{<span class="pl-k">-</span><span class="pl-c1">5</span>,<span class="pl-c1">2</span>,<span class="pl-c1">3.5</span><span class="pl-k">\</span>right<span class="pl-k">\</span>}

julia<span class="pl-k">&gt;</span> B <span class="pl-k">=</span> <span class="pl-c1">IntSet</span>(<span class="pl-c1">4</span>,<span class="pl-c1">5</span>,<span class="pl-c1">1</span>)
<span class="pl-c1">IntSet</span>([<span class="pl-c1">1</span>, <span class="pl-c1">4</span>, <span class="pl-c1">5</span>])

julia<span class="pl-k">&gt;</span> <span class="pl-c1">lap</span>(B)
<span class="pl-k">\</span>left<span class="pl-k">\</span>{<span class="pl-c1">1</span>,<span class="pl-c1">4</span>,<span class="pl-c1">5</span><span class="pl-k">\</span>right<span class="pl-k">\</span>}

julia<span class="pl-k">&gt;</span> C <span class="pl-k">=</span> <span class="pl-c1">Set</span>()
<span class="pl-c1">Set</span><span class="pl-c1">{Any}</span>({})

julia<span class="pl-k">&gt;</span> <span class="pl-c1">lap</span>(C)
<span class="pl-k">\</span>emptyset</pre></div>
<h2><a id="user-content-the-tabular-function" class="anchor" aria-hidden="true" href="#the-tabular-function"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The <code>tabular</code> function</h2>
<p>If <code>A</code> is a matrix (two-dimensional array), then <code>laprintln(A)</code> (or
<code>lap(A)</code>) prints the LaTeX code for that matrix (complete with
bounding delimeters) for inclusion in LaTeX's mathematics mode.</p>
<p>As an alternative, we also provide the function <code>tabular</code> that prints
the array for inclusion in LaTeX's text mode in the <code>tabular</code>
environment.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">Array</span>(Any,(<span class="pl-c1">2</span>,<span class="pl-c1">2</span>));

julia<span class="pl-k">&gt;</span> A[<span class="pl-c1">1</span>,<span class="pl-c1">1</span>] <span class="pl-k">=</span> <span class="pl-c1">1</span>; A[<span class="pl-c1">1</span>,<span class="pl-c1">2</span>] <span class="pl-k">=</span> <span class="pl-c1">3</span><span class="pl-k">+</span>im; A[<span class="pl-c1">2</span>,<span class="pl-c1">1</span>]<span class="pl-k">=</span><span class="pl-c1">5</span><span class="pl-k">//</span><span class="pl-c1">2</span>; A[<span class="pl-c1">2</span>,<span class="pl-c1">2</span>] <span class="pl-k">=</span> <span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">0</span>;

julia<span class="pl-k">&gt;</span> <span class="pl-c1">tabular</span>(A)
<span class="pl-k">\</span><span class="pl-k">begin</span>{tabular}{cc}
<span class="pl-k">$</span><span class="pl-c1">1</span><span class="pl-k">$</span> <span class="pl-k">&amp;</span> <span class="pl-k">$</span><span class="pl-c1">3</span><span class="pl-k">+</span><span class="pl-c1">1</span>i<span class="pl-k">$</span><span class="pl-k">\\</span>
<span class="pl-k">$</span><span class="pl-k">\</span>frac{<span class="pl-c1">5</span>}{<span class="pl-c1">2</span>}<span class="pl-k">$</span> <span class="pl-k">&amp;</span> <span class="pl-k">$</span><span class="pl-k">\</span>infty$
<span class="pl-k">\</span><span class="pl-k">end</span>{tabular}</pre></div>
<p>Notice that each entry is encased in dollar signs.</p>
<p>By default, each column is center aligned. This can be modified in
two ways. See the <code>set_align</code> function described below or by calling
<code>tabular</code> with an optional second argument like this:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">tabular</span>(A,<span class="pl-s"><span class="pl-pds">"</span>l|r<span class="pl-pds">"</span></span>)
<span class="pl-k">\</span><span class="pl-k">begin</span>{tabular}{l<span class="pl-k">|</span>r}
<span class="pl-k">$</span><span class="pl-c1">1</span><span class="pl-k">$</span> <span class="pl-k">&amp;</span> <span class="pl-k">$</span><span class="pl-c1">3</span><span class="pl-k">+</span><span class="pl-c1">1</span>i<span class="pl-k">$</span><span class="pl-k">\\</span>
<span class="pl-k">$</span><span class="pl-k">\</span>frac{<span class="pl-c1">5</span>}{<span class="pl-c1">2</span>}<span class="pl-k">$</span> <span class="pl-k">&amp;</span> <span class="pl-k">$</span><span class="pl-k">\</span>infty$
<span class="pl-k">\</span><span class="pl-k">end</span>{tabular}</pre></div>
<h2><a id="user-content-customization" class="anchor" aria-hidden="true" href="#customization"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Customization</h2>
<h3><a id="user-content-customizing-existing-types" class="anchor" aria-hidden="true" href="#customizing-existing-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Customizing existing types</h3>
<p>The <code>LatexPrint</code> module comes with default LaTeX representations for
infinity, not-a-number, and so forth. Some of these can be modified by
the following functions.</p>
<ul>
<li>
<p><code>set_inf</code> is used to set the representation of infinity. The default
creates the output <code>\infty</code> but here's how it can be changed.</p>
<div class="highlight highlight-source-julia"><pre> julia<span class="pl-k">&gt;</span> <span class="pl-c1">lap</span>(<span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">0</span>)
 <span class="pl-k">\</span>infty

 julia<span class="pl-k">&gt;</span> <span class="pl-c1">set_inf</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\\</span>text{inf}<span class="pl-pds">"</span></span>)  <span class="pl-c"><span class="pl-c">#</span> note the double backslash</span>
 <span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\\</span>text{inf}<span class="pl-pds">"</span></span>

 julia<span class="pl-k">&gt;</span> <span class="pl-c1">lap</span>(<span class="pl-c1">1</span><span class="pl-k">/</span><span class="pl-c1">0</span>)
 <span class="pl-k">\</span>text{inf}</pre></div>
</li>
<li>
<p><code>set_nan</code> is used to set the LaTeX for not-a-number:</p>
<pre><code>julia&gt; lap(0/0)
\text{NaN}

julia&gt; set_nan("\\text{nan}")
"\\text{nan}"

julia&gt; lap(0/0)
\text{nan}
</code></pre>
</li>
<li>
<p><code>set_bool</code> is used to set the LaTeX form of <code>true</code> and <code>false</code>. By
default, these output <code>\textrm{T}</code> and <code>\textrm{F}</code>. This is how
these can be changed:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">lap</span>(<span class="pl-c1">true</span>)
<span class="pl-k">\</span>mathrm{T}

julia<span class="pl-k">&gt;</span> <span class="pl-c1">set_bool</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\\</span>textsf{true}<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\\</span>textsf{false}<span class="pl-pds">"</span></span>)
(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\\</span>textsf{true}<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\\</span>textsf{false}<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">lap</span>(<span class="pl-c1">true</span>)
<span class="pl-k">\</span>textsf{<span class="pl-c1">true</span>}</pre></div>
</li>
<li>
<p><code>set_im</code> changes the symbol used for the imaginary unit. Some folks
like <em>j</em> instead of <em>i</em>:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> z <span class="pl-k">=</span> <span class="pl-c1">3</span><span class="pl-k">+</span><span class="pl-c1">2im</span>
<span class="pl-c1">3</span> <span class="pl-k">+</span> <span class="pl-c1">2im</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">lap</span>(z)
<span class="pl-c1">3</span><span class="pl-k">+</span><span class="pl-c1">2</span>i

julia<span class="pl-k">&gt;</span> <span class="pl-c1">set_im</span>(<span class="pl-s"><span class="pl-pds">"</span>j<span class="pl-pds">"</span></span>)
<span class="pl-s"><span class="pl-pds">"</span>j<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">lap</span>(z)
<span class="pl-c1">3</span><span class="pl-k">+</span><span class="pl-c1">2</span>j</pre></div>
</li>
<li>
<p><code>set_emptyset</code> is used to specify how an empty set should be
rendered.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> C <span class="pl-k">=</span> <span class="pl-c1">Set</span>()
<span class="pl-c1">Set</span><span class="pl-c1">{Any}</span>({})

julia<span class="pl-k">&gt;</span> <span class="pl-c1">lap</span>(C)
<span class="pl-k">\</span>emptyset

julia<span class="pl-k">&gt;</span> <span class="pl-c1">set_emptyset</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\\</span>{ <span class="pl-cce">\\</span>}<span class="pl-pds">"</span></span>)
<span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\\</span>{ <span class="pl-cce">\\</span>}<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">lap</span>(C)
<span class="pl-k">\</span>{ <span class="pl-k">\</span>}</pre></div>
<p>Users might like to try <code>\varnothing</code> as a nice alternative to
<code>\empytset</code>. In that case, the Julia command would be
<code>set_emptyset("\\varnothing")</code>.</p>
</li>
<li>
<p><code>set_align</code> is used to specify the alignment character for
arrays. By default elements of columns are aligned to their
center. Use one of <code>l</code>, <code>r</code>, or <code>c</code> as the alignment character.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">lap</span>(A)
<span class="pl-k">\</span>left[
<span class="pl-k">\</span><span class="pl-k">begin</span>{array}{c}
<span class="pl-c1">2</span> <span class="pl-k">\\</span>
<span class="pl-c1">10</span> <span class="pl-k">\\</span>
<span class="pl-k">-</span><span class="pl-c1">544</span> <span class="pl-k">\\</span>
<span class="pl-k">\</span><span class="pl-c1">end</span>{array}
<span class="pl-k">\</span>right]

julia<span class="pl-k">&gt;</span> <span class="pl-c1">set_align</span>(<span class="pl-s"><span class="pl-pds">"</span>r<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">lap</span>(A)
<span class="pl-k">\</span>left[
<span class="pl-k">\</span><span class="pl-k">begin</span>{array}{r}
<span class="pl-c1">2</span> <span class="pl-k">\\</span>
<span class="pl-c1">10</span> <span class="pl-k">\\</span>
<span class="pl-k">-</span><span class="pl-c1">544</span> <span class="pl-k">\\</span>
<span class="pl-k">\</span><span class="pl-c1">end</span>{array}
<span class="pl-k">\</span>right]</pre></div>
</li>
<li>
<p><code>set_delims</code> is used to specify the left and right delimiters used
for vectors and matrices.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> A <span class="pl-k">=</span> <span class="pl-c1">int</span>(<span class="pl-c1">eye</span>(<span class="pl-c1">2</span>))
<span class="pl-c1">2</span>x2 Array{Int64,<span class="pl-c1">2</span>}<span class="pl-k">:</span>
 <span class="pl-c1">1</span>  <span class="pl-c1">0</span>
 <span class="pl-c1">0</span>  <span class="pl-c1">1</span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">lap</span>(A)
<span class="pl-k">\</span>left[
<span class="pl-k">\</span><span class="pl-k">begin</span>{array}{cc}
<span class="pl-c1">1</span> <span class="pl-k">&amp;</span> <span class="pl-c1">0</span> <span class="pl-k">\\</span>
<span class="pl-c1">0</span> <span class="pl-k">&amp;</span> <span class="pl-c1">1</span> <span class="pl-k">\\</span>
<span class="pl-k">\</span><span class="pl-c1">end</span>{array}
<span class="pl-k">\</span>right]

julia<span class="pl-k">&gt;</span> <span class="pl-c1">set_delims</span>(<span class="pl-s"><span class="pl-pds">"</span>(<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>)<span class="pl-pds">"</span></span>)  <span class="pl-c"><span class="pl-c">#</span> set delimiters to be open/close parens</span>
(<span class="pl-s"><span class="pl-pds">"</span>(<span class="pl-pds">"</span></span>,<span class="pl-s"><span class="pl-pds">"</span>)<span class="pl-pds">"</span></span>)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">lap</span>(A)
<span class="pl-k">\</span><span class="pl-c1">left</span>(
<span class="pl-k">\</span><span class="pl-k">begin</span>{array}{cc}
<span class="pl-c1">1</span> <span class="pl-k">&amp;</span> <span class="pl-c1">0</span> <span class="pl-k">\\</span>
<span class="pl-c1">0</span> <span class="pl-k">&amp;</span> <span class="pl-c1">1</span> <span class="pl-k">\\</span>
<span class="pl-k">\</span><span class="pl-k">end</span>{array}
<span class="pl-k">\</span>right)</pre></div>
</li>
</ul>
<ul>
<li><code>set_nothing</code> is used to specify the output of a <code>nothing</code> value. For
example, to output an em-dash, we can do this:
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">lap</span>(<span class="pl-c1">nothing</span>)
<span class="pl-k">\</span>mathrm{<span class="pl-c1">nothing</span>}

julia<span class="pl-k">&gt;</span> <span class="pl-c1">set_nothing</span>(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\\</span>mathrm{---}<span class="pl-pds">"</span></span>)
<span class="pl-s"><span class="pl-pds">"</span><span class="pl-cce">\\</span>mathrm{---}<span class="pl-pds">"</span></span>

julia<span class="pl-k">&gt;</span> <span class="pl-c1">lap</span>(<span class="pl-c1">nothing</span>)
<span class="pl-k">\</span>mathrm{<span class="pl-k">---</span>}</pre></div>
</li>
</ul>
<h3><a id="user-content-adding-new-types" class="anchor" aria-hidden="true" href="#adding-new-types"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Adding new types</h3>
<p>There are other Julia types (such as <code>UnitRange</code>) for which
we have not implemented a conversion to LaTeX. In this
case <code>lap</code> (and our other functions) simply convert the type
to an <code>String</code>.</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-c1">lap</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>)
<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span></pre></div>
<p>If we want to create a LaTeX representation, then we
need to define a suitable version of <code>latex_form</code> like this:</p>
<div class="highlight highlight-source-julia"><pre>julia<span class="pl-k">&gt;</span> <span class="pl-k">import</span> LatexPrint<span class="pl-k">.</span>latex_form

julia<span class="pl-k">&gt;</span> <span class="pl-en">latex_form</span>(x<span class="pl-k">::</span><span class="pl-c1">UnitRange</span>) <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>[<span class="pl-pds">"</span></span> <span class="pl-k">*</span> <span class="pl-c1">string</span>(x<span class="pl-k">.</span>start) <span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">"</span>,<span class="pl-pds">"</span></span> <span class="pl-k">*</span> <span class="pl-c1">string</span>(x<span class="pl-k">.</span>stop) <span class="pl-k">*</span> <span class="pl-s"><span class="pl-pds">"</span>]<span class="pl-pds">"</span></span>
latex_form (generic <span class="pl-k">function</span> with xxx methods)

julia<span class="pl-k">&gt;</span> <span class="pl-c1">lap</span>(<span class="pl-c1">1</span><span class="pl-k">:</span><span class="pl-c1">10</span>)
[<span class="pl-c1">1</span>,<span class="pl-c1">10</span>]</pre></div>
</article></div>